/*!
 * User Logon Request
 *
 * Copyright 2018 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = fluid || require("infusion"),
    gpii = fluid.registerNamespace("gpii");

/** One dynamic component of this type is constructed for each user logon request on the LifecycleManager.
 */
fluid.defaults("gpii.lifecycleManager.userLogonRequest", {
    gradeNames: ["fluid.component"],
    requestId: null,        // A unique string, must be supplied by integrators
    gpiiKey: null,          // A GPII key, must be supplied by integrators
    requestPromise: null,   // A promise, must be supplied by integrators
    events: {
        onSuccess: null,
        onError: null
    },
    invokers: {
        handleRequest: {
            funcName: "gpii.lifecycleManager.userLogonRequest.handleRequest",
            args: ["{that}", "{arguments}.0"]
                             // logonState
        }
    },
    listeners: {
        "onSuccess.handleSuccessRequest": {
            listener: "gpii.lifecycleManager.userLogonRequest.handleSuccessRequest",
            args: ["{that}", "{arguments}.0"]
        },
        "onError.handleFailedRequest": {
            listener: "gpii.lifecycleManager.userLogonRequest.handleFailedRequest",
            args: ["{that}", "{arguments}.0"],
            priority: "after:handleErrors"
        }
    }
});

gpii.lifecycleManager.userLogonRequest.handleSuccessRequest = function (that, payload) {
    that.options.requestPromise.resolve(payload);
    that.destroy();
};

gpii.lifecycleManager.userLogonRequest.handleFailedRequest = function (that, err) {
    that.options.requestPromise.reject(err);
    that.destroy();
};

gpii.lifecycleManager.userLogonRequest.handleRequest = function (that, logonState) {
    var gpiiKey = that.options.gpiiKey;
    if (gpiiKey === "reset") {
        that.handleResetGpiiKey();
    } else {
        if (logonState === "login") {
            that.loginUser(gpiiKey);
        } else {
            that.logoutUser(gpiiKey);
        }
    }
};

gpii.lifecycleManager.userLogonRequest.handlerGrades = fluid.freezeRecursive({
    login: "gpii.lifecycleManager.loginRequest",
    logout: "gpii.lifecycleManager.logoutRequest"
});

/** A variant of user logon request to handle key-in requests.
 */
fluid.defaults("gpii.lifecycleManager.loginRequest", {
    gradeNames: [
        "gpii.lifecycleManager.userLogonRequest",
        "{lifecycleManager}.options.logonStateChangeHandler"
    ],
    listeners: {
        "onCreate.loginUser": {
            listener: "gpii.lifecycleManager.loginRequest.loginUser",
            args: ["{that}", "{lifecycleManager}"]
        }
    }
});

gpii.lifecycleManager.loginRequest.loginUser = function (that, lifecycleManager) {
    var logoutNoUserPromise = fluid.promise();

    // If the active key is "noUser", log it out before logging in another key
    var activeGpiiKeys = lifecycleManager.getActiveSessionGpiiKeys();
    if (activeGpiiKeys[0] === "noUser") {
        logoutNoUserPromise = that.logoutUserWithoutResponse("noUser");
    } else {
        logoutNoUserPromise.resolve();
    }

    // login another key after "noUser" is logged out
    logoutNoUserPromise.then(function () {
        that.handleRequest("login");
    }, function (error) {
        that.errorResponse("Error occurred during logout: " + error.message);
    });
};

/** A variant of user logon request to handle key-out requests.
 */
fluid.defaults("gpii.lifecycleManager.logoutRequest", {
    gradeNames: [
        "gpii.lifecycleManager.userLogonRequest",
        "gpii.flowManager.userLogonHandling.stateChangeHandler"
    ],
    listeners: {
        "onCreate.logoutUser": {
            listener: "{that}.handleRequest",
            args: ["logout"]
        }
    }
});

/*
 * The lifecycleManager logon request queue is used to hold the key-in and key-out requests.
 * The entries in the action queue are of the format:
 * {
 *     gpiiKey: {String},
 *     logonState: {String}  // enum: ["login", "logout"]
 * }
 * The action queue is run sequentially, and an item is considered "done" once the promise returned by the request
 * is resolved.
 */
gpii.lifecycleManager.addToUserLogonRequestQueue = function (that, queue, item) {
    var newItem = fluid.copy(item);
    newItem.requestId = fluid.allocateGuid();
    newItem.requestPromise = fluid.promise();
    queue.push(newItem);
    if (!that.isProcessingUserLogonRequestQueue) {
        that.processUserLogonRequestQueue();
    }
    return newItem.requestPromise;
};

gpii.lifecycleManager.processUserLogonRequestQueue = function (that, queue) {
    // mark that we're currently processing action queue
    that.isProcessingUserLogonRequestQueue = true;
    // pick first item and process
    var item = queue.shift();
    var gradeName = gpii.lifecycleManager.userLogonRequest.handlerGrades[item.logonState];

    if (!gradeName) {
        fluid.fail("No handler grade found for user logon action - " + item.logonState);
    };

    that.events.onUserLogonRequestReceived.fire(gradeName, item.gpiiKey, item.requestPromise);

    item.requestPromise.then(that.endProcessOneUserLogonRequest, that.endProcessOneUserLogonRequest);
};

gpii.lifecycleManager.endProcessOneUserLogonRequest = function (that, lifecycleManager) {
    var queue = that.userLogonRequestQueue;

    // process next item in action queue if it exists
    if (queue.length > 0) {
        that.processUserLogonRequestQueue(queue);
    } else {
        that.isProcessingUserLogonRequestQueue = false;

        setTimeout(function () {
            // if no actual user is logged in, login with "noUser"
            var activeGpiiKeys = lifecycleManager.getActiveSessionGpiiKeys(); // find currently logged in user:
            if (activeGpiiKeys.length === 0) {
                fluid.log("No active keys in GPII. Key in noUser");
                that.addToUserLogonRequestQueue({
                    gpiiKey: "noUser",
                    logonState: "login"
                });
            }
        }, 0);
    }
};

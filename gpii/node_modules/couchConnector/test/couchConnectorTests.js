/*

    GPII Couch Connector Tests

    Copyright 2018 Raising the Floor International

    Licensed under the New BSD license. You may not use this file except in compliance with this License.

    You may obtain a copy of the License at
    https://github.com/GPII/universal/blob/master/LICENSE.txt

*/
"use strict";

var fluid  = require("infusion"),
    gpii   = fluid.registerNamespace("gpii"),
    jqUnit = require("node-jqunit");

require("gpii-couchdb-test-harness");
gpii.test.couchdb.loadTestingSupport();

require("gpii-express");
gpii.express.loadTestingSupport();

require("couchConnector");
require("journal");

fluid.registerNamespace("gpii.tests.couchConnector");

fluid.defaults("gpii.tests.couchConnector", {
    gradeNames: ["gpii.couchConnector"],
    resetServerPort: 1244,
    databases: {
        gpii: {
            data: [
                "%gpii-universal/gpii/node_modules/couchConnector/test/data/testData.json"
            ]
        }
    }
});

fluid.defaults("gpii.tests.couchConnector.sequenceElement.startExpress", {
    gradeNames: ["fluid.test.sequenceElement"],
    sequence: [
        {
            func: "{couchConnector}.events.startExpressResetServer.fire"
        },
        {
            event:    "{couchConnector}.events.onExpressResetServerStarted",
            listener: "fluid.log",
            args:     ["Reset server started."]
        }
    ]
});

fluid.defaults("gpii.tests.couchConnector.sequenceElement.forceClean", {
    gradeNames: ["fluid.test.sequenceElement"],
    sequence: [{
        task: "{harness}.provisionDbs",
        args: [true], // forceClean
        resolve: "fluid.log",
        resolveArgs: ["Database cleanup successful."]
    }]
});

fluid.defaults("gpii.test.couchConnector.sequence", {
    gradeNames: "gpii.test.couchdb.sequence",
    sequenceElements: {
        startExpress: {
            gradeNames: "gpii.tests.couchConnector.sequenceElement.startExpress",
            priority: "before:startHarness"
        },
        forceClean: {
            gradeNames: "gpii.tests.couchConnector.sequenceElement.forceClean",
            priority: "after:startHarness"
        }
    }
});

fluid.defaults("gpii.tests.couchConnector.caseHolder", {
    gradeNames: ["gpii.test.couchdb.caseHolder"],
    sequenceGrade: "gpii.test.couchConnector.sequence",
    expected: {
        total: {
            doc_count: 5
        },
        initialView: undefined,
        totalAfterInsert: {
            doc_count: 6
        },
        afterInsert: {
            ok: true,
            id: "toinsert"
        },
        insert: {
            id: "toinsert",
            type: "gpiiAppInstallationClient",
            name: "Test Computers",
            oauth2ClientId: "testComputer",
            oauth2ClientSecret: "testComputerSecret"
        },
        verifyInsertByView: {
            id: "toinsert",
            key: "testComputer"
        },
        viewAfterReset: undefined
    },
    rawModules: [{
        name: "Testing Couch Connector.",
        tests: [
            {
                name: "Testing the provisioning and the reset REST endpoint.",
                type: "test",
                sequence: [
                    {
                        func: "{totalRequest}.send"
                    },
                    {
                        listener: "gpii.tests.couchConnector.checkResponse",
                        event:    "{totalRequest}.events.onComplete",
                        args:     ["The total initial number of records should be as expected", "{totalRequest}.nativeResponse", "{arguments}.0", 200, "{testCaseHolder}.options.expected.total"]
                    },
                    {
                        func: "{initialViewRequest}.send"
                    },
                    {
                        listener: "gpii.tests.couchConnector.checkResponse",
                        event:    "{initialViewRequest}.events.onComplete",
                        args:     ["The initial view should be as expected", "{initialViewRequest}.nativeResponse", "{arguments}.0", 200, "{testCaseHolder}.options.expected.initialView", "rows.0"]
                    },
                    {
                        func: "{insertRequest}.send",
                        args: "{that}.options.expected.insert"
                    },
                    {
                        listener: "gpii.tests.couchConnector.checkResponse",
                        event:    "{insertRequest}.events.onComplete",
                        args:     ["A new record should be added succesfully", "{insertRequest}.nativeResponse", "{arguments}.0", 201, "{testCaseHolder}.options.expected.afterInsert"]
                    },
                    {
                        func: "{verifyInsertRequest}.send"
                    },
                    {
                        listener: "gpii.tests.couchConnector.checkResponse",
                        event:    "{verifyInsertRequest}.events.onComplete",
                        args:     ["The new record should be able to be retrieved", "{verifyInsertRequest}.nativeResponse", "{arguments}.0", 200, "{testCaseHolder}.options.expected.totalAfterInsert"]
                    },
                    {
                        func: "{verifyInsertByViewRequest}.send"
                    },
                    {
                        listener: "gpii.tests.couchConnector.checkResponse",
                        event:    "{verifyInsertByViewRequest}.events.onComplete",
                        args:     ["The new record should be visible in the view", "{verifyInsertByViewRequest}.nativeResponse", "{arguments}.0", 200, "{testCaseHolder}.options.expected.verifyInsertByView", "rows.0"]
                    },
                    {
                        func: "{resetRequest}.send"
                    },
                    {
                        listener: "jqUnit.assert",
                        event:    "{testEnvironment}.events.onCouchProvisioningComplete",
                        args:     ["The reset request should have been successful.", "CouchDB has been reprovisioned."]
                    },
                    {
                        func: "{verifyResetRequest}.send"
                    },
                    {
                        listener: "gpii.tests.couchConnector.checkResponse",
                        event:    "{verifyResetRequest}.events.onComplete",
                        args:     ["The total number of records should be correct after a reset", "{verifyResetRequest}.nativeResponse", "{arguments}.0", 200, "{testCaseHolder}.options.expected.total"]
                    },
                    {
                        func: "{verifyResetByViewRequest}.send"
                    },
                    {
                        listener: "gpii.tests.couchConnector.checkResponse",
                        event:    "{verifyResetByViewRequest}.events.onComplete",
                        args:     ["The view should be as expected after a reset", "{verifyResetByViewRequest}.nativeResponse", "{arguments}.0", 200, "{testCaseHolder}.options.expected.viewAfterReset", "rows.0"]
                    }
                ]
            }
        ]
    }],
    components: {
        totalRequest: {
            type: "gpii.test.couchdb.request",
            options: {
                path: "/gpii",
                method: "GET"
            }
        },
        initialViewRequest: {
            type: "gpii.test.couchdb.request",
            options: {
                path: "/gpii/_design/views/_view/findClientByOauth2ClientId?key=%22testComputer%22",
                method: "GET"
            }
        },
        insertRequest: {
            type: "gpii.test.couchdb.request",
            options: {
                path: "/gpii/toinsert",
                method: "PUT"
            }
        },
        verifyInsertRequest: {
            type: "gpii.test.couchdb.request",
            options: {
                path: "/gpii",
                method: "GET"
            }
        },
        verifyInsertByViewRequest: {
            type: "gpii.test.couchdb.request",
            options: {
                path: "/gpii/_design/views/_view/findClientByOauth2ClientId?key=%22testComputer%22",
                method: "GET"
            }
        },
        resetRequest: {
            type: "kettle.test.request.http",
            options: {
                path: "/reset-couch",
                port: "{testEnvironment}.options.resetServerPort",
                method: "GET"
            }
        },
        verifyResetRequest: {
            type: "gpii.test.couchdb.request",
            options: {
                path: "/gpii",
                method: "GET"
            }
        },
        verifyResetByViewRequest: {
            type: "gpii.test.couchdb.request",
            options: {
                path: "/gpii/_design/views/_view/findClientByOauth2ClientId?key=%22testComputer%22",
                method: "GET"
            }
        }
    }
});

gpii.tests.couchConnector.checkResponse = function (msg, response, body, expectedStatus, expected, bodyPath) {
    expectedStatus = expectedStatus ? expectedStatus : 200;

    var bodyData = JSON.parse(body);

    if (bodyPath) {
        bodyData = fluid.get(bodyData, bodyPath);
    }
    gpii.test.express.helpers.isSaneResponse(response, body, expectedStatus);

    if (expected === undefined) {
        jqUnit.assertUndefined(msg, bodyData);
    } else {
        jqUnit.assertLeftHand(msg, expected, bodyData);
    }
};

fluid.defaults("gpii.tests.couchConnectorTests", {
    gradeNames: ["fluid.test.testEnvironment", "gpii.tests.couchConnector"],
    couch: {
        port: 25984
    },
    components: {
        testCaseHolder: {
            type: "gpii.tests.couchConnector.caseHolder"
        }
    }
});

fluid.test.runTests("gpii.tests.couchConnectorTests");

/*!

    Convenience grade to provision and manage a CouchDB harness provided by the gpii-couchdb-test-harness package.
    Intended as a replacement for the legacy "Pouch Manager".

    Copyright 2018 Raising the Floor International.

    Licensed under the New BSD license. You may not use this file except in compliance with this License.

    You may obtain a copy of the License at
    https://github.com/GPII/universal/blob/master/LICENSE.txt

*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

/*

    A "couch connector" that provides a persistent CouchDB harness that can be explicitly reset as needed.

*/
fluid.defaults("gpii.couchConnector", {
    gradeNames: ["fluid.component"],
    resetServerPort: 8060,
    components: {
        harness: {
            type: "gpii.test.couchdb.harness.persistent",
            options: {
                databases: "{couchConnector}.options.databases",
                listeners: {
                    "onStartupComplete.escalate": "{couchConnector}.events.onCouchStartupComplete",
                    "onDbProvisioningComplete.escalate": "{couchConnector}.events.onCouchProvisioningComplete"
                }
            }
        },
        expressReset: {
            type: "gpii.express",
            createOnEvent: "startExpressResetServer",
            options: {
                port: "{couchConnector}.options.resetServerPort",
                components: {
                    resetMiddleware: {
                        type: "gpii.couchConnector.resetMiddleware"
                    }
                },
                listeners: {
                    "onStarted.escalate": "{couchConnector}.events.onExpressResetServerStarted.fire"
                }
            }
        }
    },
    events: {
        onCouchStartupComplete: null,
        onExpressResetServerStarted: null,
        onCouchProvisioningComplete: null,
        onReady: {
            events: {
                onCouchStartupComplete:      "onCouchStartupComplete",
                onExpressResetServerStarted: "onExpressResetServerStarted"
            }
        },
        startExpressResetServer: null
    }
});

/*

    Middleware to reset the CouchDB instance.

*/
fluid.defaults("gpii.couchConnector.resetMiddleware", {
    gradeNames: ["gpii.express.middleware.requestAware"],
    path: "/reset-couch",
    namespace: "resetMiddleware",
    method: "get",
    handlerGrades: ["gpii.couchConnector.reset.handler"]
});

fluid.defaults("gpii.couchConnector.reset.handler", {
    gradeNames: ["gpii.express.handler"],
    invokers: {
        handleRequest: {
            funcName: "gpii.couchConnector.reset.handler.reset",
            args: ["{that}", "{harness}"]
        }
    },
    listeners: {
        "{couchConnector}.events.onCouchProvisioningComplete": {
            funcName: "{that}.sendResponse",
            args: ["{that}.options.responses.success.statusCode", "{that}.options.responses.success.message"]
        }
    },
    responses: {
        success: {
            statusCode: 200,
            message: "Success: CouchDB has been reprovisioned with the initial data set."
        },
        error: {
            statusCode: 500
        }
    }
});

gpii.couchConnector.reset.handler.reset = function (that, harness) {
    var cleanupPromise = harness.provisionDbs(true); // forceClean

    // The success call back is unnecessary here, it's handled by the `onCouchProvisioningComplete` listener.
    cleanupPromise.then(null, function (err) {
        that.sendResponse(that.options.responses.error.statusCode, err);
    });
};

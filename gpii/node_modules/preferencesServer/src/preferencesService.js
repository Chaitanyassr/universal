/*!
Copyright 2017-2018 OCAD university

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

/* eslint-env browser */
/* eslint strict: ["error", "function"] */

var fluid = fluid || require("infusion");

(function () {

    "use strict";

    var gpii = fluid.registerNamespace("gpii");

    fluid.defaults("gpii.preferencesServer.preferencesService", {
        gradeNames: ["fluid.component"],
        components: {
            dataStore: {
                type: "gpii.dbOperation.dataStore"
            }
        },
        invokers: {
            getPreferencesByGpiiKey: {
                funcName: "gpii.preferencesServer.preferencesService.getPreferencesByGpiiKey",
                args: ["{dataStore}", "{arguments}.0"]
                // gpiiKey
            },
            createPrefsSafe: {
                funcName: "gpii.preferencesServer.preferencesService.createPrefsSafe",
                args: ["{dataStore}", "{arguments}.0"]
                // preferences
            }
        }
    });

    gpii.preferencesServer.preferencesService.errors = fluid.freezeRecursive({
        gpiiKeyMissing: "GPII key \"%gpiiKey\" does not exist",
        preferencesMissing: "Missing preferences safe data or missing preferences value in the preferences safe data"
    });

    // APIs for Preferences and Preferences Safes

    /**
     * Grant an authorization for the give GPII app installation. The gpii key will be verified before the access token is returned.
     * @param dataStore {Component} An instance of gpii.dbOperation.dbDataStore
     * @param gpiiKey {String} A GPII key
     * @return {Promise} A promise object whose resolved value is the entire preferences associated with the GPII key.
     * An error will be returned if the GPII key is not found or there is no preferences defined for the GPII key.
     */
    gpii.preferencesServer.preferencesService.getPreferencesByGpiiKey = function (dataStore, gpiiKey) {
        var promiseTogo = fluid.promise();
        var dataPromise = dataStore.findPrefsSafeByGpiiKey(gpiiKey);

        dataPromise.then(function (data) {
            if (data === undefined) {
                var gpiiKeyMissingMsg = fluid.stringTemplate(gpii.preferencesServer.preferencesService.errors.gpiiKeyMissing, {
                    gpiiKey: gpiiKey
                });
                promiseTogo.reject({message: gpiiKeyMissingMsg});
            } else {
                if (data.prefsSafe) {
                    promiseTogo.resolve(fluid.get(data, ["prefsSafe", "preferences"]));
                } else {
                    promiseTogo.resolve(undefined);
                }
            }
        });
        return promiseTogo;
    };

    /**
     * Grant an authorization for the give GPII app installation. The gpii key will be verified before the access token is returned.
     * @param dataStore {Component} An instance of gpii.dbOperation.dbDataStore
     * @param prefsSafeData {Object} A preferences safe data. An example:
     * {
     *     prefsSafeType: {String}
     *     name: {String}
     *     password: {String}
     *     email: {String}
     *     preferences: {Object}  // must be provided
     * }
     * @return {Promise} A promise object whose resolved value is the entire preferences associated with the GPII key.
     * An error will be returned if the GPII key is not found or there is no preferences defined for the GPII key.
     */
    gpii.preferencesServer.preferencesService.createPrefsSafe = function (dataStore, prefsSafeData) {
        var promiseTogo = fluid.promise();

        if (!prefsSafeData || !prefsSafeData.preferences) {
            promiseTogo.reject(gpii.preferencesServer.preferencesService.errors.preferencesMissing);
        } else {
            promiseTogo = dataStore.addPrefsSafe({
                prefsSafeType: prefsSafeData.prefsSafeType || gpii.preferencesServer.prefsSafeType.user,
                name: prefsSafeData.name || null,
                password: prefsSafeData.password || null,
                email: prefsSafeData.email || null,
                preferences: prefsSafeData.preferences
            });
        }

        return promiseTogo;
    };

})();

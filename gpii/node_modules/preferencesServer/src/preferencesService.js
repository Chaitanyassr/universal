/*!
Copyright 2017-2018 OCAD university

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

/* eslint-env browser */
/* eslint strict: ["error", "function"] */

var fluid = fluid || require("infusion");

(function () {

    "use strict";

    var gpii = fluid.registerNamespace("gpii");

    fluid.defaults("gpii.preferencesServer.preferencesService", {
        gradeNames: ["fluid.component"],
        components: {
            dataStore: {
                type: "gpii.dbOperation.dataStore"
            }
        },
        invokers: {
            getPreferencesByGpiiKey: {
                funcName: "gpii.preferencesServer.preferencesService.getPreferencesByGpiiKey",
                args: ["{dataStore}", "{arguments}.0"]
                // gpiiKey
            },
            createPrefsSet: {
                funcName: "gpii.preferencesServer.preferencesService.createPrefsSet",
                args: ["{that}", "{arguments}.0"]
                // preferences
            }
        },
        events: {
            onCreatePrefsSet: null
        },
        listeners: {
            onCreatePrefsSet: [{
                listener: "gpii.preferencesServer.preferencesService.createPrefsSafe",
                args: ["{dataStore}.addPrefsSafe", "{arguments}.0"],
                namespace: "createPrefsSafe"
            }, {
                listener: "gpii.preferencesServer.preferencesService.createGpiiKey",
                args: ["{dataStore}.addGpiiKey", "{arguments}.0"],
                namespace: "createGpiiKey"
            }]
        }
    });

    gpii.preferencesServer.preferencesService.errors = fluid.freezeRecursive({
        gpiiKeyMissing: "GPII key \"%gpiiKey\" does not exist",
        preferencesMissing: "Missing preferences safe data or missing preferences value in the preferences safe data"
    });

    // APIs for Preferences and Preferences Safes

    /**
     * Grant an authorization for the give GPII app installation. The gpii key will be verified before the access token is returned.
     * @param dataStore {Component} An instance of gpii.dbOperation.dbDataStore
     * @param gpiiKey {String} A GPII key
     * @return {Promise} A promise object whose resolved value is the entire preferences associated with the GPII key.
     * An error will be returned if the GPII key is not found or there is no preferences defined for the GPII key.
     */
    gpii.preferencesServer.preferencesService.getPreferencesByGpiiKey = function (dataStore, gpiiKey) {
        var promiseTogo = fluid.promise();
        var dataPromise = dataStore.findPrefsSafeByGpiiKey(gpiiKey);

        dataPromise.then(function (data) {
            if (data === undefined) {
                var gpiiKeyMissingMsg = fluid.stringTemplate(gpii.preferencesServer.preferencesService.errors.gpiiKeyMissing, {
                    gpiiKey: gpiiKey
                });
                promiseTogo.reject({message: gpiiKeyMissingMsg});
            } else {
                if (data.prefsSafe) {
                    promiseTogo.resolve(fluid.get(data, ["prefsSafe", "preferences"]));
                } else {
                    promiseTogo.resolve(undefined);
                }
            }
        });
        return promiseTogo;
    };

    /**
     * The entry point of createPrefsSet() API. Fires the transforming promise workflow by triggering onCreatePrefsSet event.
     * An error will be returned if the prefsSafeData or prefsSafeData.preferences is not provided.
     * @param that {Component} An instance of gpii.preferencesServer.preferencesService
     * @param prefsSafeData {Object} The prefs safe data
     * {
     *     prefsSafeType: {String}
     *     name: {String}
     *     password: {String}
     *     email: {String}
     *     preferences: {Object}  // must be provided
     * }
     */
    gpii.preferencesServer.preferencesService.createPrefsSet = function (that, prefsSafeData) {
        if (!prefsSafeData || !prefsSafeData.preferences) {
            return fluid.promise().reject(gpii.preferencesServer.preferencesService.errors.preferencesMissing);
        } else {
            return fluid.promise.fireTransformEvent(that.events.onCreatePrefsSet, {prefsSafeData: prefsSafeData});
        }
    };

    /**
     * The first step in the promise transforming chain for implementing createPrefsSet() API.
     * Create a prefsSafe record with the provided prefsSafeData.
     * @param addPrefsSafe {Function} The addPrefsSafe() API provided by gpii.oauth2.dbDataStore
     * @param input {Object} The data passed on from the entry function gpii.preferencesServer.preferencesService.createPrefsSet(). Its structure:
     *  {
     *      prefsSafeData: {
     *          prefsSafeType: {String}
     *          name: {String}
     *          password: {String}
     *          email: {String}
     *          preferences: {Object}  // must be provided
     *      }
     *  }
     * @return {Promise} A promise object that carries the given input value with the created prefsSafeId being added.
     */
    gpii.preferencesServer.preferencesService.createPrefsSafe = function (addPrefsSafe, input) {
        var promiseTogo = fluid.promise();
        var prefsSafeData = input.prefsSafeData;
        var prefsSafeDataAdded = {
            prefsSafeType: prefsSafeData.prefsSafeType || gpii.preferencesServer.prefsSafeType.user,
            name: prefsSafeData.name || null,
            password: prefsSafeData.password || null,
            email: prefsSafeData.email || null,
            preferences: prefsSafeData.preferences
        };

        var addPrefsSafePromise = addPrefsSafe(prefsSafeDataAdded);
        addPrefsSafePromise.then(function (addPrefsSafeResponse) {
            promiseTogo.resolve({
                prefsSafeId: addPrefsSafeResponse.id,
                prefsSafeDataAdded: prefsSafeDataAdded
            });
        });
        return promiseTogo;
    };

    /**
     * The last step in the promise transforming chain for implementing createPrefsSet() API.
     * Create a gpiiKey record with the provided input.
     * @param addGpiiKey {Function} The addGpiiKey() API provided by gpii.oauth2.dbDataStore
     * @param input {Object} The data passed on from the entry function gpii.preferencesServer.preferencesService.createPrefsSet(). Its structure:
     *  {
     *      prefsSafeId: {String},
     *      prefsSafeDataAdded: {
     *          prefsSafeType: {String}
     *          name: {String}
     *          password: {String}
     *          email: {String}
     *          preferences: {Object}  // must be provided
     *      }
     *  }
     * @return {Promise} A promise object whose resolved value is:
     *  {
     *      gpiiKey: {String},
     *      preferences: {Object}
     *  }
     */
    gpii.preferencesServer.preferencesService.createGpiiKey = function (addGpiiKey, input) {
        var addGpiiKeyPromise = addGpiiKey({
            prefsSafeId: input.prefsSafeId,
            prefsSetName: gpii.preferencesServer.defaultPrefsSetName
        });

        var mapper = function (addGpiiKeyResponse) {
            return {
                gpiiKey: addGpiiKeyResponse.id,
                preferences: input.prefsSafeDataAdded.preferences
            };
        };
        return fluid.promise.map(addGpiiKeyPromise, mapper);
    };

})();

/*!
GPII Preferences Server

Copyright 2012-2016 OCAD University
Copyright 2014-2015 Raising The Floor - International
Copyright 2017-2018 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

require("ontologyHandler");
require("gpii-oauth2");

fluid.defaults("gpii.preferencesServer", {
    gradeNames: ["fluid.component"],
    requestHandlers: {
        preferencesGet: {
            route: "/preferences/:gpiiKey",
            method: "get",
            type: "gpii.preferencesServer.get.handler"
        },
        preferencesPost: {
            route: "/preferences",
            method: "post",
            type: "gpii.preferencesServer.post.handler"
        },
        preferencesPut: {
            route: "/preferences/:gpiiKey",
            method: "put",
            type: "gpii.preferencesServer.put.handler"
        }
    },
    invokers: {
        getPreferences: {
            funcName: "gpii.preferencesServer.getPreferences",
            args: ["{preferencesService}", "{ontologyHandler}", "{arguments}.0", "@expand:gpii.preferencesServer.getRequestView({arguments}.1)"]
            // gpiiKey, toView
        },
        createPreferences: {
            funcName: "gpii.preferencesServer.createPreferences",
            args: ["{preferencesService}", "{ontologyHandler}", "{arguments}.0", "@expand:gpii.preferencesServer.getRequestView({arguments}.1)"]
            // preferences, toView
        // },
        // setRawPreferences: {
        //     funcName: "gpii.preferencesServer.setRawPreferences",
        //     // TODO: This should really return a promise - {arguments}.0 is "onSuccess"
        //     args: ["{gpii.preferencesServer}.preferencesService", "{kettle.request}", "{arguments}.0", "{arguments}.1", "{arguments}.2" ]
        // },
        // setPrefsRequestHandler: {
        //     funcName: "gpii.preferencesServer.setPrefsRequestHandler",
        //     args: ["{preferencesServer}", "{arguments}.0", "{arguments}.1"]
        //     // request, successEvent
        // },
        // setPrefsReturnHandler: {
        //     funcName: "gpii.preferencesServer.setPrefsReturnHandler",
        //     args: ["{arguments}.0", "{arguments}.1"]
        //     // reply, request
        }
    },
    components: {
        preferencesService: {
            type: "gpii.preferencesServer.preferencesService"
        },
        // rawPreferencesServer: {
        //     type: "kettle.dataSource.URL",
        //     options: {
        //         // url: "{gpii.preferencesServer}.options.urls.rawPreferences",
        //         termMap: {
        //             gpiiKey: "%gpiiKey"
        //         },
        //         writable: true
        //     }
        // },
        ontologyHandler: {
            type: "gpii.ontologyHandler"
        },
        dataStore: {
            type: "gpii.dbOperation.dbDataStore"
        },
        authGrantFinder: {
            type: "gpii.oauth2.authGrantFinder"
        }
    },
    distributeOptions: {
        authorizationServiceDataStore: {
            "record": "{gpii.preferencesServer}.dataStore",
            "target": "{that authorizationService}.options.components.dataStore"
        },
        preferencesServiceDataStore: {
            "record": "{gpii.preferencesServer}.dataStore",
            "target": "{that preferencesService}.options.components.dataStore"
        }
    }
});

/*
 * Simple function to get the 'view'. In case none is given, defaults to the "flat" ontology.
 *
 * @request (String) a view
 *
 * @return (String) the value of the 'view', or "flat" if none is given
 */
gpii.preferencesServer.getRequestView = function (view) {
    return view ? view : "flat";
};

gpii.preferencesServer.getPreferences = function (preferencesService, ontologyHandler, gpiiKey, toView) {
    var rawPrefsPromise = preferencesService.getPreferencesByGpiiKey(gpiiKey);
    var mapper = function (rawPrefs) {
        var prefs;
        if (rawPrefs) {
            prefs = ontologyHandler.rawPrefsToOntology(rawPrefs, toView);
        } else {
            prefs = undefined;
        }
        return prefs;
    };
    return fluid.promise.map(rawPrefsPromise, mapper);
};

gpii.preferencesServer.createPreferences = function (preferencesService, ontologyHandler, preferences, toView) {
    toView = gpii.preferencesServer.getRequestView(toView);
    var payload = {};
    payload[toView] = preferences;

    var prefsSafePromise = preferencesService.createPrefsSafe({
        preferences: payload
    });

    var mapper = function (createPrefsSafeResponse) {
        return {
            gpiiKey: createPrefsSafeResponse.id
        };
    };
    return fluid.promise.map(prefsSafePromise, mapper);
};

gpii.preferencesServer.setRawPreferences = function (preferencesService, request, successEvent, body, gpiiKey) {
    // if we were passed a GPII key, that means we want to do an update, else we're creating a new NP set
    var writeMethod = (gpiiKey) ? "PUT" : "POST";
    var promise = preferencesService.set({gpiiKey: gpiiKey || ""}, body, {writeMethod: writeMethod});
    promise.then(successEvent.fire, request.events.onError.fire);
};

// TODO - should be removed or factored - just copied from gpii.flowmanager.logAndNotify
gpii.preferencesServer.logAndNotify = function (msg, event, callback) {
    return function (data) {
        fluid.log(msg, data);
        event.fire(callback ? callback(data) : data);
    };
};

gpii.preferencesServer.setPrefsRequestHandler = function (preferencesServer, request, successEvent) {
    // key preferences set by ontology
    var toView = gpii.preferencesServer.getRequestView(request);
    var payload = {};
    payload[toView] = request.req.body;
    preferencesServer.setRawPreferences(successEvent, payload, undefined);
};

gpii.preferencesServer.setPrefsReturnHandler = function (reply, request) {
    // despite potentially having modified the entire raw preferences set, we only return the
    // preferences in the view that we originally got them
    var ret = {
        gpiiKey: reply.gpiiKey,
        preferences: reply.preferences[gpii.preferencesServer.getRequestView(request)]
    };
    request.events.onSuccess.fire(ret);
};

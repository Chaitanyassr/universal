/*!
Copyright 2017-2018 OCAD university

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

/* global fluid */

"use strict";

(function () {

    var gpii = fluid.registerNamespace("gpii");

    // The base test enviornment without any pouch data being imported
    fluid.defaults("gpii.tests.preferencesServer.preferencesService.testEnvironment", {
        gradeNames: ["gpii.tests.dbOperation.pouchBackedTestEnvironment"],
        dbViewsLocation: "../../../../../testData/dbData/views.json",
        dbName: "gpii",
        components: {
            preferencesService: {
                type: "gpii.preferencesServer.preferencesService",
                createOnEvent: "onFixturesConstructed",
                options: {
                    gradeNames: ["gpii.tests.dbOperation.dbDataStore.base"],
                    dbViews: "{arguments}.0",
                    components: {
                        dataStore: {
                            type: "gpii.dbOperation.dbDataStore"
                        }
                    }
                }
            },
            caseHolder: {
                type: "gpii.tests.inBrowserPouchDB.baseTestCaseHolder"
            }
        }
    });

    // All input test data
    gpii.tests.preferencesServer.preferencesService.testData = {
        preferencesToCreate_full: {
            prefsSafeType: "snapset",
            name: "bob",
            password: "bob_password",
            email: "bob_email",
            preferences: {
                "http://registry.gpii.net/common/matchMakerType": "ruleBased",
                "http://registry.gpii.net/common/fontSize": 24
            }
        },
        preferencesToCreate_prefsOnly: {
            preferences: {
                "http://registry.gpii.net/common/cursorSize": 24
            }
        }
    };

    // All expected results
    gpii.tests.preferencesServer.preferencesService.expected = {
        // for testing getPreferencesByGpiiKey()
        success: {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/matchMakerType": "ruleBased",
                            "http://registry.gpii.net/common/fontSize": 24,
                            "http://registry.gpii.net/common/foregroundColor": "white"
                        }
                    }
                }
            }
        },
        unauthorized: {
            message: "Unauthorized",
            statusCode: 401,
            isError: true
        },
        missingGpiiKey: {
            message: "GPII key \"non-existent-gpii-key\" does not exist"
        },
        // for testing createPrefsSet()
        preferencesToCreate_prefsOnly: {
            prefsSafeType: "user",
            name: null,
            password: null,
            email: null,
            preferences: {
                "http://registry.gpii.net/common/cursorSize": 24
            }
        },
        missingPrefsSafeData: "Missing preferences safe data or missing preferences value in the preferences safe data"
    };

    gpii.tests.preferencesServer.preferencesService.pouchData = [{
        "_id": "alice_gpii_key",
        "type": "gpiiKey",
        "schemaVersion": "0.1",
        "prefsSafeId": "prefsSafe-1",
        "prefsSetName": "gpii-default",
        "revoked": false,
        "revokedReason": null,
        "timestampCreated": "2017-11-21T18:11:22.101Z",
        "timestampUpdated": null
    }, {
        "_id": "bob_gpii_key",
        "type": "gpiiKey",
        "schemaVersion": "0.1",
        "prefsSafeId": null,
        "prefsSetName": null,
        "revoked": false,
        "revokedReason": null,
        "timestampCreated": "2017-11-21T18:11:22.101Z",
        "timestampUpdated": null
    }, {
        "_id": "prefsSafe-1",
        "type": "prefsSafe",
        "schemaVersion": "0.1",
        "prefsSafeType": "user",
        "name": null,
        "password": null,
        "email": null,
        "preferences": {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/matchMakerType": "ruleBased",
                            "http://registry.gpii.net/common/fontSize": 24,
                            "http://registry.gpii.net/common/foregroundColor": "white"
                        }
                    }
                }
            }
        },
        "timestampCreated": "2017-12-01T18:43:32.889Z",
        "timestampUpdated": null
    }];

    fluid.defaults("gpii.tests.preferencesServer.preferencesService.getPreferencesByGpiiKey", {
        gradeNames: ["gpii.tests.preferencesServer.preferencesService.testEnvironment"],
        pouchData: gpii.tests.preferencesServer.preferencesService.pouchData,
        rawModules: [{
            name: "Test getPreferencesByGpiiKey()",
            tests: [{
                name: "getPreferencesByGpiiKey() returns preferences - a success workflow",
                sequence: [{
                    func: "gpii.tests.dbOperation.invokePromiseProducer",
                    args: ["{preferencesService}.getPreferencesByGpiiKey", ["alice_gpii_key"], "{that}"]
                }, {
                    listener: "jqUnit.assertDeepEq",
                    args: ["The access token should be received in an expected format", gpii.tests.preferencesServer.preferencesService.expected.success, "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }]
            }, {
                name: "getPreferencesByGpiiKey() returns undefined when the GPII key has no preferences defined",
                sequence: [{
                    func: "gpii.tests.dbOperation.invokePromiseProducer",
                    args: ["{preferencesService}.getPreferencesByGpiiKey", ["bob_gpii_key"], "{that}"]
                }, {
                    listener: "jqUnit.assertUndefined",
                    args: ["undefined is returned when the gpii key has no preferences defined", "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }]
            }, {
                name: "getPreferencesByGpiiKey() returns error when a gpii key is not provided in the argument list",
                sequence: [{
                    func: "gpii.tests.dbOperation.invokePromiseProducer",
                    args: ["{preferencesService}.getPreferencesByGpiiKey", ["non-existent-gpii-key"], "{that}"]
                }, {
                    listener: "jqUnit.assertDeepEq",
                    args: ["The error is returned when a gpii key is not found", gpii.tests.preferencesServer.preferencesService.expected.missingGpiiKey, "{arguments}.0"],
                    event: "{that}.events.onError"
                }]
            }]
        }]
    });

    fluid.defaults("gpii.tests.preferencesServer.preferencesService.createPrefsSet", {
        gradeNames: ["gpii.tests.preferencesServer.preferencesService.testEnvironment"],
        pouchData: gpii.tests.preferencesServer.preferencesService.pouchData,
        rawModules: [{
            name: "Test createPrefsSet()",
            tests: [{
                name: "createPrefsSet() creates a prefs safe and a GPII key - a success workflow",
                sequence: [{
                    func: "gpii.tests.dbOperation.invokePromiseProducer",
                    args: ["{preferencesService}.createPrefsSet", [gpii.tests.preferencesServer.preferencesService.testData.preferencesToCreate_full], "{that}"]
                }, {
                    listener: "gpii.tests.dbOperation.invokePromiseProducer",
                    args: ["{preferencesService}.dataStore.findPrefsSafeByGpiiKey", ["{arguments}.0.gpiiKey"], "{that}"],
                    event: "{that}.events.onResponse"
                }, {
                    listener: "gpii.tests.preferencesServer.preferencesService.verifyFetchedPrefsSafe",
                    args: [gpii.tests.preferencesServer.preferencesService.testData.preferencesToCreate_full, "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }]
            }, {
                name: "createPrefsSet() sets default field values",
                sequence: [{
                    func: "gpii.tests.dbOperation.invokePromiseProducer",
                    args: ["{preferencesService}.createPrefsSet", [gpii.tests.preferencesServer.preferencesService.testData.preferencesToCreate_prefsOnly], "{that}"]
                }, {
                    listener: "gpii.tests.dbOperation.invokePromiseProducer",
                    args: ["{preferencesService}.dataStore.findPrefsSafeByGpiiKey", ["{arguments}.0.gpiiKey"], "{that}"],
                    event: "{that}.events.onResponse"
                }, {
                    listener: "gpii.tests.preferencesServer.preferencesService.verifyFetchedPrefsSafe",
                    args: [gpii.tests.preferencesServer.preferencesService.expected.preferencesToCreate_prefsOnly, "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }]
            }, {
                name: "createPrefsSet() returns error when the prefsSafeData is not provided",
                sequence: [{
                    func: "gpii.tests.dbOperation.invokePromiseProducer",
                    args: ["{preferencesService}.createPrefsSet", [undefined], "{that}"]
                }, {
                    listener: "jqUnit.assertDeepEq",
                    args: ["The error is returned when a gpii key is not found", gpii.tests.preferencesServer.preferencesService.expected.missingPrefsSafeData, "{arguments}.0"],
                    event: "{that}.events.onError"
                }]
            }, {
                name: "createPrefsSet() returns error when the prefsSafeData.preferences is not provided",
                sequence: [{
                    func: "gpii.tests.dbOperation.invokePromiseProducer",
                    args: ["{preferencesService}.createPrefsSet", [{preferences: null}], "{that}"]
                }, {
                    listener: "jqUnit.assertDeepEq",
                    args: ["The error is returned when a gpii key is not found", gpii.tests.preferencesServer.preferencesService.expected.missingPrefsSafeData, "{arguments}.0"],
                    event: "{that}.events.onError"
                }]
            }]
        }]
    });

    gpii.tests.preferencesServer.preferencesService.verifyFetchedPrefsSafe = function (preferencesToCreate, response) {
        var gpiiKeyDetails = response.gpiiKeyDetails;
        jqUnit.assertEquals("The value of \"schemaVersion\" has been set correctly", gpii.dbOperation.schemaVersion, gpiiKeyDetails.schemaVersion);
        jqUnit.assertNotUndefined("The value of \"prefsSafeId\" has been set to default", gpiiKeyDetails.prefsSafeId);
        jqUnit.assertEquals("The value of \"prefsSetName\" has been set to default", gpii.preferencesServer.defaultPrefsSetName, gpiiKeyDetails.prefsSetName);
        jqUnit.assertFalse("The value of \"revoked\" has been set to false", gpiiKeyDetails.revoked);
        jqUnit.assertNull("The value of \"revokedReason\" has been set to null", gpiiKeyDetails.revokedReason);
        jqUnit.assertNotUndefined("The value of \"timestampCreated\" has been set", gpiiKeyDetails.timestampCreated);
        jqUnit.assertNull("The value of \"timestampUpdated\" has been set", gpiiKeyDetails.timestampUpdated);

        var prefsSafe = response.prefsSafe;
        jqUnit.assertLeftHand("The data is saved successfully", preferencesToCreate, prefsSafe);
    };

})();

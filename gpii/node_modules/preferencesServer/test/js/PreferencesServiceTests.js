/*!
Copyright 2017-2018 OCAD university

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

/* global fluid */

"use strict";

(function () {

    var gpii = fluid.registerNamespace("gpii");

    // The base test enviornment without any pouch data being imported
    fluid.defaults("gpii.tests.preferencesServer.preferencesService.testEnvironment", {
        gradeNames: ["gpii.tests.dbOperation.pouchBackedTestEnvironment"],
        dbViewsLocation: "../../../../../testData/dbData/views.json",
        dbName: "gpii",
        components: {
            preferencesService: {
                type: "gpii.preferencesServer.preferencesService",
                createOnEvent: "onFixturesConstructed",
                options: {
                    gradeNames: ["gpii.tests.dbOperation.dbDataStore.base"],
                    dbViews: "{arguments}.0",
                    components: {
                        dataStore: {
                            type: "gpii.dbOperation.dbDataStore"
                        }
                    }
                }
            },
            caseHolder: {
                type: "gpii.tests.inBrowserPouchDB.baseTestCaseHolder"
            }
        }
    });

    // All expected results
    gpii.tests.preferencesServer.preferencesService.expected = {
        success: {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/matchMakerType": "ruleBased",
                            "http://registry.gpii.net/common/fontSize": 24,
                            "http://registry.gpii.net/common/foregroundColor": "white"
                        }
                    }
                }
            }
        },
        unauthorized: {
            message: "Unauthorized",
            statusCode: 401,
            isError: true
        },
        missingGpiiKey: {
            message: "GPII key \"non-existent-gpii-key\" does not exist"
        }
    };

    gpii.tests.preferencesServer.preferencesService.testData = [{
        "_id": "alice_gpii_key",
        "type": "gpiiKey",
        "schemaVersion": "0.1",
        "prefsSafeId": "prefsSafe-1",
        "prefsSafeContext": "gpii-default",
        "revoked": false,
        "revokedReason": null,
        "timestampCreated": "2017-11-21T18:11:22.101Z",
        "timestampUpdated": null
    }, {
        "_id": "bob_gpii_key",
        "type": "gpiiKey",
        "schemaVersion": "0.1",
        "prefsSafeId": null,
        "prefsSafeContext": null,
        "revoked": false,
        "revokedReason": null,
        "timestampCreated": "2017-11-21T18:11:22.101Z",
        "timestampUpdated": null
    }, {
        "_id": "prefsSafe-1",
        "type": "prefsSafe",
        "schemaVersion": "0.1",
        "prefsSafeType": "user",
        "name": null,
        "password": null,
        "email": null,
        "preferences": {
            "flat": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences",
                        "preferences": {
                            "http://registry.gpii.net/common/matchMakerType": "ruleBased",
                            "http://registry.gpii.net/common/fontSize": 24,
                            "http://registry.gpii.net/common/foregroundColor": "white"
                        }
                    }
                }
            }
        },
        "timestampCreated": "2017-12-01T18:43:32.889Z",
        "timestampUpdated": null
    }];

    fluid.defaults("gpii.tests.preferencesServer.preferencesService.getPreferencesByGpiiKey", {
        gradeNames: ["gpii.tests.preferencesServer.preferencesService.testEnvironment"],
        pouchData: gpii.tests.preferencesServer.preferencesService.testData,
        rawModules: [{
            name: "Test getPreferencesByGpiiKey()",
            tests: [{
                name: "getPreferencesByGpiiKey() returns preferences - a success workflow",
                sequence: [{
                    func: "gpii.tests.dbOperation.invokePromiseProducer",
                    args: ["{preferencesService}.getPreferencesByGpiiKey", ["alice_gpii_key"], "{that}"]
                }, {
                    listener: "jqUnit.assertDeepEq",
                    args: ["The access token should be received in an expected format", gpii.tests.preferencesServer.preferencesService.expected.success, "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }]
            }, {
                name: "getPreferencesByGpiiKey() returns undefined when the GPII key has no preferences defined",
                sequence: [{
                    func: "gpii.tests.dbOperation.invokePromiseProducer",
                    args: ["{preferencesService}.getPreferencesByGpiiKey", ["bob_gpii_key"], "{that}"]
                }, {
                    listener: "jqUnit.assertUndefined",
                    args: ["undefined is returned when the gpii key has no preferences defined", "{arguments}.0"],
                    event: "{that}.events.onResponse"
                }]
            }, {
                name: "getPreferencesByGpiiKey() returns error when a gpii key is not provided in the argument list",
                sequence: [{
                    func: "gpii.tests.dbOperation.invokePromiseProducer",
                    args: ["{preferencesService}.getPreferencesByGpiiKey", ["non-existent-gpii-key"], "{that}"]
                }, {
                    listener: "jqUnit.assertDeepEq",
                    args: ["The error is returned when a gpii key is not found", gpii.tests.preferencesServer.preferencesService.expected.missingGpiiKey, "{arguments}.0"],
                    event: "{that}.events.onError"
                }]
            }]
        }]
    });

})();

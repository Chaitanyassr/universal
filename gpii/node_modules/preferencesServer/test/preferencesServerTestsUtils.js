/**
GPII Preferences Server Test Utility

Copyright 2018 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.tests.preferencesServer");

fluid.defaults("gpii.tests.preferencesServer.environment", {
    gradeNames: ["gpii.test.pouch.environment"],
    port: 1234,
    pouchConfig: {
        databases: {
            gpii: {
                data: [
                    "%preferencesServer/test/data/gpiiKeys.json5",
                    "%preferencesServer/test/data/prefsSafes.json5",
                    "%gpii-universal/testData/dbData/views.json5"
                ]
            }
        }
    },
    components: {
        testCaseHolder: {
            type: "gpii.tests.preferencesServer.testCaseHolder"
        }
    },
    distributeOptions: {
        source: "{that}.options.rawModules",
        target: "{that > testCaseHolder}.options.rawModules"
    },
    mergePolicy: {
        rawModules: "noexpand"
    }
});

fluid.defaults("gpii.tests.preferencesServer.testCaseHolder", {
    gradeNames: ["gpii.test.express.caseHolder"],
    events: {
        onResponse: null,
        onError: null
    },
    components: {
        preferencesServer: {
            type: "gpii.preferencesServer",
            options: {
                components: {
                    dataStore: {
                        type: "gpii.dbOperation.dbDataStore",
                        options: {
                            dataSourceConfig: {
                                baseUrl: "http://localhost",
                                port: "{gpii.tests.preferencesServer.environment}.options.port",
                                dbName: "gpii"
                            }
                        }
                    }
                }
            }
        }
    },
    sequenceEnd: [{
        func: "{gpii.tests.preferencesServer.environment}.events.onCleanup.fire"
    }, {
        event:    "{gpii.tests.preferencesServer.environment}.events.onCleanupComplete",
        listener: "fluid.log",
        args:     ["Database cleanup complete"]
    }]
});

gpii.tests.preferencesServer.buildTest = function (name, testCase, sequence) {
    var customOptions = fluid.censorKeys(testCase, ["name"]);

    var defaultTestComponent = {
        type: "gpii.tests.preferencesServer.environment",
        options: {
            rawModules: [{
                name: name,
                tests: [{
                    name: testCase.name,
                    sequence: sequence
                }]
            }]
        }
    };

    var testComponent = fluid.copy(defaultTestComponent);
    var testComponentOptions = fluid.extend({}, defaultTestComponent.options, customOptions);
    fluid.set(testComponent, ["options"], testComponentOptions);

    return testComponent;
};

gpii.tests.preferencesServer.runTestFixture = function (testDefs) {
    fluid.each(testDefs, function (oneTestDef) {
        fluid.each(oneTestDef.testFixtures, function (oneTestCase) {
            return fluid.test.runTests(gpii.tests.preferencesServer.buildTest(oneTestDef.name, oneTestCase, oneTestDef.sequence));
        });
    });
};

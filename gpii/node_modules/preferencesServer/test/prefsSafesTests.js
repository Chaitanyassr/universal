/**
GPII Preferences Server Tests

Copyright 2018 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

require("./preferencesServerTestsUtils.js");
require("./preferencesServerTests.js");

fluid.require("%gpii-universal");
gpii.loadTestingSupport();

fluid.registerNamespace("gpii.tests.preferencesServer.prefsSafes");

gpii.tests.preferencesServer.config = {
    configName: "gpii.tests.preferencesServer.config",
    configPath: "%preferencesServer/test/configs"
};

/////////////////////// TESTING prefsSafes GET /prefsafe/:prefsSafeId ////////////////////////////
fluid.registerNamespace("gpii.tests.preferencesServer.prefsSafes.get");

gpii.tests.preferencesServer.prefsSafes.get.buildTestDef = function (fixture) {
    var expectedStatusCode = fixture.expectedStatusCode || 200;
    return {
        name: fixture.name,
        expect: 2,
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/prefssafe/" + fixture.url,
                    method: "GET",
                    port: 8081,
                    termMap: {
                        prefsSafeId: fixture.prefsSafeId
                    }
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send"
        }, {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponse",
            args: ["{arguments}.0", fixture.expected, "{getRequest}.nativeResponse.statusCode", expectedStatusCode]
        }]
    };
};

gpii.tests.preferencesServer.prefsSafes.get.successFixtures = [
    {
        name: "GET: Basic retrieval of a prefs safe",
        prefsSafeId: "prefsSafe-7",
        url: "%prefsSafeId",
        expected: {
            "id": "prefsSafe-7",
            "type": "prefsSafe",
            "schemaVersion": "0.1",
            "prefsSafeType": "user",
            "name": null,
            "password": null,
            "email": null,
            "preferences": {
                "flat": {
                    "name": "bit of stuff",
                    "contexts": {
                        "gpii-default": {
                            "name": "Default preferences",
                            "preferences": {
                                "http://registry.gpii.net/common/onScreenKeyboard/enabled": true
                            },
                            "metadata": []
                        }
                    },
                    "metadata": []
                }
            },
            "timestampCreated": "2017-12-14T19:55:11.641Z",
            "timestampUpdated": null
        }
    }
];

/////////////////////// TESTING prefsSafes with keys GET ////////////////////////////
fluid.registerNamespace("gpii.tests.preferencesServer.prefsSafes.getSafeWithKeys");

gpii.tests.preferencesServer.prefsSafes.getSafeWithKeys.buildTestDef = function (fixture) {
    var expectedStatusCode = fixture.expectedStatusCode || 200;
    return {
        name: fixture.name,
        expect: 2,
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/prefssafe-with-keys/" + fixture.url,
                    method: "GET",
                    port: 8081,
                    termMap: {
                        prefsSafeId: fixture.prefsSafeId
                    }
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send"
        }, {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponse",
            args: ["{arguments}.0", fixture.expected, "{getRequest}.nativeResponse.statusCode", expectedStatusCode]
        }]
    };
};
fluid.logObjectRenderChars = 2048;
gpii.tests.preferencesServer.prefsSafes.getSafeWithKeys.successFixtures = [
    {
        name: "GET: Retieve a payload containing the prefs-safes and all it's associated key/credential records",
        prefsSafeId: "prefsSafe-7",
        url: "%prefsSafeId",
        expected: {
            prefsSafe: {
                "id": "prefsSafe-7",
                "type": "prefsSafe",
                "schemaVersion": "0.1",
                "prefsSafeType": "user",
                "name": null,
                "password": null,
                "email": null,
                "preferences": {
                    "flat": {
                        "name": "bit of stuff",
                        "contexts": {
                            "gpii-default": {
                                "name": "Default preferences",
                                "preferences": {
                                    "http://registry.gpii.net/common/onScreenKeyboard/enabled": true
                                },
                                "metadata": []
                            }
                        },
                        "metadata": []
                    }
                },
                "timestampCreated": "2017-12-14T19:55:11.641Z",
                "timestampUpdated": null
            },
            keys: [
                {
                    "type": "gpiiCloudSafeCredential",
                    "schemaVersion": "0.1",
                    "prefsSafeId": "prefsSafe-7",
                    "gpiiExpressUserId": "org.couch.db.user:prefs7user",
                    "id": "8f3085a7-b65b-4648-9a78-8ac7de766997"
                },
                {
                    "id": "np_tiny",
                    "type": "gpiiKey",
                    "schemaVersion": "0.1",
                    "prefsSafeId": "prefsSafe-7",
                    "prefsSetId": "gpii-default",
                    "revoked": false,
                    "revokedReason": null,
                    "timestampCreated": "2017-12-14T19:55:11.641Z",
                    "timestampUpdated": null
                }
            ]
        }
    }
];



/////////////////////// TESTING prefsSafes PUT (Save) ////////////////////////////

/////////////////////// TESTING prefsSafes List (GET) ////////////////////////////
fluid.registerNamespace("gpii.tests.preferencesServer.prefsSafes.list");

gpii.tests.preferencesServer.prefsSafes.list.buildTestDef = function (fixture) {
    var expectedStatusCode = fixture.expectedStatusCode || 200;
    return {
        name: fixture.name,
        expect: 2,
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/prefssafes",
                    method: "GET",
                    port: 8081
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send"
        }, {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponse",
            args: ["{arguments}.0", fixture.expected, "{getRequest}.nativeResponse.statusCode", expectedStatusCode]
        }]
    };
};

gpii.tests.preferencesServer.prefsSafes.list.successFixtures = [
    {
        name: "GET: List Preference Safes",
        // prefsSafeId: "prefsSafe-7",
        // url: "%prefsSafeId",
        expected: [
            {
                "name": null,
                "email": null,
                "created": "2017-12-14T19:55:11.640Z",
                "updated": null,
                "prefsSafeId": "prefsSafe-1"
            },
            {
                "name": null,
                "email": null,
                "created": "2017-12-14T19:55:11.640Z",
                "updated": null,
                "prefsSafeId": "prefsSafe-2"
            },
            {
                "name": null,
                "email": null,
                "created": "2017-12-14T19:55:11.641Z",
                "updated": null,
                "prefsSafeId": "prefsSafe-3"
            },
            {
                "name": null,
                "email": null,
                "created": "2017-12-14T19:55:11.641Z",
                "updated": null,
                "prefsSafeId": "prefsSafe-4"
            },
            {
                "name": null,
                "email": null,
                "created": "2017-12-14T19:55:11.641Z",
                "updated": null,
                "prefsSafeId": "prefsSafe-5"
            },
            {
                "name": null,
                "email": null,
                "created": "2017-12-14T19:55:11.641Z",
                "updated": null,
                "prefsSafeId": "prefsSafe-6"
            },
            {
                "name": null,
                "email": null,
                "created": "2017-12-14T19:55:11.641Z",
                "updated": null,
                "prefsSafeId": "prefsSafe-7"
            }
        ]
    }
];

/////////////////////// TESTING prefsSafes List Keys for Safe (GET) ////////////////////////////
fluid.registerNamespace("gpii.tests.preferencesServer.prefsSafes.listKeysForSafe");

gpii.tests.preferencesServer.prefsSafes.listKeysForSafe.buildTestDef = function (fixture) {
    var expectedStatusCode = fixture.expectedStatusCode || 200;
    return {
        name: fixture.name,
        expect: 2,
        components: {
            getRequest: {
                type: "kettle.test.request.http",
                options: {
                    path: "/prefssafe-keys/" + fixture.url,
                    method: "GET",
                    port: 8081,
                    termMap: {
                        prefsSafeId: fixture.prefsSafeId
                    }
                }
            }
        },
        sequence: [{
            func: "{getRequest}.send"
        }, {
            event: "{getRequest}.events.onComplete",
            listener: "gpii.tests.preferencesServer.testResponse",
            args: ["{arguments}.0", fixture.expected, "{getRequest}.nativeResponse.statusCode", expectedStatusCode]
        }]
    };
};

gpii.tests.preferencesServer.prefsSafes.listKeysForSafe.successFixtures = [
    {
        name: "GET: Basic listing of keys for a prefssafe",
        prefsSafeId: "prefsSafe-7",
        url: "%prefsSafeId",
        expected: [
            {
                "type": "gpiiCloudSafeCredential",
                "schemaVersion": "0.1",
                "prefsSafeId": "prefsSafe-7",
                "gpiiExpressUserId": "org.couch.db.user:prefs7user",
                "id": "8f3085a7-b65b-4648-9a78-8ac7de766997"
            },
            {
                "id": "np_tiny",
                "type": "gpiiKey",
                "schemaVersion": "0.1",
                "prefsSafeId": "prefsSafe-7",
                "prefsSetId": "gpii-default",
                "revoked": false,
                "revokedReason": null,
                "timestampCreated": "2017-12-14T19:55:11.641Z",
                "timestampUpdated": null
            }
        ]
    }
];

/////////////////////// TESTING prefsSafes Create (POST) ////////////////////////////

/////////////////////// TESTING prefsSafes PUT (Save) ////////////////////////////

gpii.tests.preferencesServer.prefsSafes.testMap = [ {
    build: gpii.tests.preferencesServer.prefsSafes.get.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.get.successFixtures
}, {
    build: gpii.tests.preferencesServer.prefsSafes.list.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.list.successFixtures
}, {
    build: gpii.tests.preferencesServer.prefsSafes.listKeysForSafe.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.listKeysForSafe.successFixtures
}, {
    build: gpii.tests.preferencesServer.prefsSafes.getSafeWithKeys.buildTestDef,
    fixtures: gpii.tests.preferencesServer.prefsSafes.getSafeWithKeys.successFixtures
}];

gpii.tests.preferencesServer.prefsSafes.testDefs = fluid.flatten(fluid.transform(gpii.tests.preferencesServer.prefsSafes.testMap, function (mapEl) {
    return fluid.transform(mapEl.fixtures, mapEl.build, function (fixture) {
        var common = {
            config: gpii.tests.preferencesServer.config,
            pouchTestCaseHolder: "gpii.tests.preferencesServer.pouchTestCaseHolder"
        };

        return fluid.extend({}, common, fixture);
    });
}));

gpii.test.bootstrapServer(gpii.tests.preferencesServer.prefsSafes.testDefs);

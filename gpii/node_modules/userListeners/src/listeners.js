/* User listeners
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    request = require("request"),
    ndef = require("ndef");

var gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.userListeners");

// The user listeners.
fluid.defaults("gpii.userListeners", {
    gradeNames: ["fluid.component", "fluid.contextAware"],
    contextAwareness: {
        platform: {
            checks: {
                windows: {
                    contextValue: "{gpii.contexts.windows}",
                    gradeNames: "gpii.userListeners.windows"
                }
            }
        }
    },
    components: {
        pcsc: {
            type: "gpii.userListeners.pcsc"
        }
    },
    events: {
        // Start the listeners
        "onStartListeners": null,
        // Stop the listeners
        "onStopListeners": null,
        // A token has been added or removed
        "onToken": null // {userListener}, "token", "arrive"/"remove"
    },
    listeners: {
        "onCreate.startListeners": "{that}.events.onStartListeners"
    }
});

// A user listener.
fluid.defaults("gpii.userListener", {
    gradeNames: ["fluid.component"],
    events: {
        // A token has arrived.
        "onTokenArrive": null,
        // A token has removed.
        "onTokenRemove": null,
        // An NDEF message has been received.
        "onNDEFMessage": null
    },
    invokers: {
        // Start the listener, returning a Promise
        startListener: "fluid.notImplemented",
        // Stop the listener, returning a Promise
        stopListener: "fluid.notImplemented",
        // Parse a Buffer containing an NDEF message, returning a string.
        decodeNDEF: {
            funcName: "gpii.userListeners.decodeNDEF",
            args: [
                "{arguments}.0" // NDEF buffer
            ]
        }
    },
    members: {
        // Set to true to call proximityTriggered, otherwise login/logout.
        proximity: false
    },
    listeners: {
        // Start/stop this listener
        "{userListeners}.events.onStartListeners": {
            funcName: "gpii.userListeners.startListener",
            args: ["{that}"]
        },
        "{userListeners}.events.onStopListeners": "{that}.stopListener",

        "onTokenArrive": {
            funcName: "gpii.userListeners.tokenArrived",
            args: [
                "{that}",
                "{arguments}.1" // token
            ]
        },
        "onTokenRemove": {
            funcName: "gpii.userListeners.tokenRemoved",
            args: [
                "{that}",
                "{arguments}.1" // token
            ]
        }
    }
});

/**
 * Start the user listener.
 *
 * @param that {Component} An instance of gpii.userListener.
 * @return {Promise} A resolved promise if it succeeds.
 */
gpii.userListeners.startListener = function (that) {
    that.startListener().then(function () {
        fluid.log(fluid.logLevel.WARN, "Listener (" + that.typeName + ") started");
    }, function (err) {
        fluid.log(fluid.logLevel.WARN, "Listener (" + that.typeName + ") not started: ", err);
    });
};

/**
 * Handles the onTokenArrive event.
 *
 * It calls the "login" action for non-proximity devices, otherwise "proximityTriggered".
 *
 * @param that {Component} An instance of gpii.userListener.
 * @param token {string} The token from the user listener.
 */
gpii.userListeners.tokenArrived = function (that, token) {
    var action = that.proximity ? "proximityTriggered" : "login";
    request("http://localhost:8081/user/" + token + "/" + action);
};

/**
 * Handles the onTokenRemove event.
 *
 * It calls the "logout" action for non-proximity devices, otherwise it does nothing.
 *
 * @param that {Component} An instance of gpii.userListener.
 * @param token {string} The token from the user listener.
 */
gpii.userListeners.tokenRemoved = function (that, token) {
    if (!that.proximity) {
        request("http://localhost:8081/user/" + token + "/logout");
    }
};

/**
 * Decodes an NDEF message (the tag from a card), returning the value of the first text record.
 *
 * @param tagBuffer
 * @return {string} The text value, or null if none.
 */
gpii.userListeners.decodeNDEF = function (tagBuffer) {
    var text = null;
    if (tagBuffer) {
        // Parse the NDEF buffer.
        var bytes = Array.prototype.slice.call(tagBuffer);
        var records = ndef.decodeMessage(bytes);
        // Get the first text record.
        var textRecord = records.find(function (record) {
            return record.type === ndef.RTD_TEXT;
        });

        if (textRecord) {
            text = textRecord.value;
        }
    }

    return text;
};

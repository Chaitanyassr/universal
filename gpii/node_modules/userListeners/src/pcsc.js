/* PC/SC user listener.
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");

var gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.userListeners");

fluid.defaults("gpii.pcscUserListener", {
    gradeNames: ["fluid.component", "fluid.contextAware", "gpii.userListener"],
    contextAwareness: {
        platform: {
            checks: {
                windows: {
                    contextValue: "{gpii.contexts.windows}",
                    gradeNames: "gpii.pcscUserListener.windows"
                },
                linux: {
                    contextValue: "{gpii.contexts.linux}",
                    gradeNames: "gpii.pcscUserListener.linux"
                }
            }
        }
    },

    invokers: {
        startListener: {
            funcName: "gpii.userListeners.pcscStartListener",
            args: ["{that}"]
        },
        getPCSC: "fluid.identity"
    }
});

/**
 * Start the user listener.
 *
 * @param that {Component} The gpii.pcscUserListener instance.
 */
gpii.userListeners.pcscStartListener = function (that) {
    var pcsc = that.getPCSC();
    if (pcsc) {
        pcsc.on("reader", function (reader) {
            fluid.log("Got card reader", reader.name);
            reader.on("status", function (status) {
                gpii.userListeners.pcscStatusChanged(that, reader, status);
            });
        });
    } else {
        fluid.log("PC/SC user listener is not available.");
    }

};

/**
 *
 * @param that
 * @param reader
 */
gpii.userListeners.pcscStatusChanged = function (that, reader) {
    fluid.log(fluid);
};

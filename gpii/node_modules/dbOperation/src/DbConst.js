/*!
Copyright 2017 OCAD university

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/
"use strict";

var fluid = fluid || require("infusion");

var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.dbOperation");

// The default value of the number of seconds that access tokens become invalid.
gpii.dbOperation.schemaVersion = "0.1";

// All doc types used for saving different documents into CouchDB/PouchDB
// See [the documentation of Authorization Server](../../../../../documentation/AuthServer.md)
// regarding accepted fields for each document type.
gpii.dbOperation.docTypes = fluid.freezeRecursive({
    gpiiKey: "gpiiKey",
    prefsSafe: "prefsSafe",
    clientCredential: "clientCredential",
    gpiiAppInstallationClient: "gpiiAppInstallationClient",
    gpiiAppInstallationAuthorization: "gpiiAppInstallationAuthorization"
});

// All error details that the dbOperation module reports.
gpii.dbOperation.errors = fluid.freezeRecursive({
    missingInput: {
        message: "The input field \"%fieldName\" is undefined",
        statusCode: 400,
        isError: true
    },
    missingDoc: {
        message: "The record of %docName is not found",
        statusCode: 400,
        isError: true
    },
    unauthorized: {
        message: "Unauthorized",
        statusCode: 401,
        isError: true
    }
});

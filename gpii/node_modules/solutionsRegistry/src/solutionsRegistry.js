/*
 * GPII Solutions Registry
 *
 * Copyright 2012 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    path = require("path");

fluid.defaults("gpii.solutionsRegistry", {
    gradeNames: ["kettle.app"],
    requestHandlers: {
        solutionGet: {
            route: "/solution/:id",
            method: "get",
            handler: "gpii.solutionsRegistry.get.handler"
        },
        solutionPost: {
            route: "/solution/:id",
            method: "post"
        },
        solutionQuery: {
            route: "/solution?:query",
            method: "get"
        }
    },
    solutionsRegistryUrl: "",
    solutionQueryUrl: "",
    components: {
        solutionSource: {
            type: "kettle.dataSource.CouchDB",
            options: {
                url: "{gpii.solutionsRegistry}.options.solutionsRegistryUrl",
                writable: true,
                termMap: {
                    id: "%id"
                }
            }
        },
        solutionQuerySource: {
            type: "kettle.dataSource.CouchDB",
            options: {
                url: "{gpii.solutionsRegistry}.options.solutionQueryUrl",
                termMap: {
                    os: "%os"
                }
            }
        }
    }
});



fluid.defaults("gpii.solutionsRegistry.dev", {
    gradeNames: ["fluid.component", "kettle.urlExpander.distributeDevVariables"],
    components: {
        solutionSource: {
            type: "kettle.dataSource.URL"
        },
        solutionQuerySource: {
            type: "kettle.dataSource.URL"
        }
    }
});




fluid.defaults("gpii.solutionsRegistry.get.handler", {
    gradeNames: "kettle.request.http",
    invokers: {
        handleRequest: {
            funcName: "gpii.solutionsRegistry.get.handleRequest",
            args: ["{request}.req.params.id", "{request}", "{solutionsRegistry}.solutionSource"]
        }
    }
});

gpii.handleSolutionGet = function (id, request, solutionSource) {
    solutionSource.get({
        id: id
    }, request.events.onSuccess.fire);
};



fluid.defaults("gpii.solutionsRegistry.post.handler", {
    gradeNames: "kettle.request.http",
    invokers: {
        handleRequest: {
            funcName: "gpii.solutionsRegistry.post.handleRequest",
            args: ["{request}.req", "{request}", "{solutionsRegistry}.solutionSource"]
        }
    }
});


gpii.solutionsRegistry.post.handleRequest = function (req, request, solutionSource) {
    solutionSource.set({
        id: req.params.id
    }, req.body, request.events.onSuccess.fire);
};


fluid.defaults("gpii.solutionsRegistry.query.handler", {
    gradeNames: "kettle.request.http",
    invokers: {
        handleRequest: {
            funcName: "gpii.solutionsRegistry.query.handleRequest",
            args: ["{request}", "{request}.req.query.os", "{solutionsRegistry}.solutionQuerySource"]
        }
    }
});

gpii.solutionsRegistry.query.handleRequest = function (request, os, solutionQuerySource) {
    if (!os) {
        request.events.onError.fire({
            isError: true,
            message: "No os specified."
        });
        return;
    }
    solutionQuerySource.get({
        os: os
    }, request.events.onSuccess.fire);
};


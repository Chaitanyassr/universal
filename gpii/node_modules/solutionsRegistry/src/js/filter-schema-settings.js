/* eslint-env node */
"use strict";
var fluid = require("infusion");
var gpii  = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.universal.solutionsRegistry");

/**
 *
 * Filter a settings schema so that it only has checks ("properties") for the specific settings in the payload.  Used in
 * the sanity checks of the solutions registry itself, and in settings validation middleware.
 *
 * @param {Object} settingsPayload - The settings to validate.
 * @param {Object} settingsSchema - The schema to filter.
 * @param {String|Array<String>} [pathToSchemaProperties] - An optional path to the settings within the schema.
 * @return {Object} The filtered schema.
 *
 */
gpii.universal.solutionsRegistry.filterSchemaToSettings = function (settingsPayload, settingsSchema, pathToSchemaProperties) {
    pathToSchemaProperties = pathToSchemaProperties || ["properties"];
    var filteredSchema = fluid.copy(settingsSchema);
    var prefs = fluid.get(settingsPayload, ["flat", "contexts", "gpii-default",  "preferences"]);
    var requiredKeys = fluid.keys(prefs);
    var allProperties = fluid.get(settingsSchema, pathToSchemaProperties);
    var filteredProperties = fluid.filterKeys(allProperties, requiredKeys);
    fluid.set(filteredSchema, pathToSchemaProperties, filteredProperties);
    return filteredSchema;
};

/* eslint-env node */
"use strict";
var fluid = require("infusion");
var gpii  = fluid.registerNamespace("gpii");

fluid.require("%kettle");
fluid.require("%gpii-json-schema");

// Add the ability to require JSON5 files.
require("json5/lib/register");

// Require universal so that we can resolve paths to it and any sub-modules.
require("../../../../../");

require("./filter-schema-settings");

fluid.registerNamespace("gpii.universal.solutionsRegistry.kettle.request.http");

gpii.universal.solutionsRegistry.kettle.request.http.generateFilteredSchema = function (baseSchema, req, rules, pathToSchemaProperties) {
    // Derive the validation payload using the same rules as the main middleware.
    var payload = fluid.model.transformWithRules(req, rules);

    // Filter the underlying schema using the derived settings.
    var filteredSchema = gpii.universal.solutionsRegistry.filterSchemaToSettings(payload, baseSchema, pathToSchemaProperties);
    return filteredSchema;
};

gpii.universal.solutionsRegistry.kettle.request.http.getSettingsSchema = function (settingsSchemaPath) {
    var resolvedPath = fluid.module.resolvePath(settingsSchemaPath);
    var schema = require(resolvedPath);
    return schema;
};

fluid.defaults("gpii.universal.solutionsRegistry.kettle.request.http", {
    gradeNames: ["gpii.schema.kettle.request.http"],
    mergePolicy: {
        // TODO: Discuss whether to move this up to the underlying grade in gpii-json-schema or otherwise handle this.
        inputSchema: "nomerge", // Allow expansion of IoC references, but disable merging.
        // TODO: Discuss whether to move this up to gpii-json-schema and whether the "has query data" mix-in grade is worth preserving.
        "rules.requestContentToValidate": "nomerge"
    },
    settingsSchemaPath: "%gpii-universal/build/schemas/settings-schema.json",
    settingsSchema: "@expand:gpii.universal.solutionsRegistry.kettle.request.http.getSettingsSchema({that}.options.settingsSchemaPath)",
    filteredSettingsSchema: "@expand:gpii.universal.solutionsRegistry.kettle.request.http.generateFilteredSchema({that}.options.settingsSchema, {request}.req, {that}.options.rules.requestContentToValidate)",
    combinedSettingsPrefsSchema: {
        // TODO: This is required because we disallow merging input schemas at the moment.  Discuss options.
        "$schema": "gss-v7-full#",
        oneOf: [
            // "flat matchmaker" prefs safe format
            // flat -> contexts -> any object name -> settings
            {
                type: "object",
                properties: {
                    flat: {
                        type: "object",
                        required: true,
                        properties: {
                            contexts: {
                                type: "object",
                                required: true,
                                additionalProperties: {
                                    type: "object",
                                    required: true,
                                    properties: {
                                        settings: "{that}.options.filteredSettingsSchema"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            // settings payload format
            // contexts -> any object name -> preferences
            {
                type: "object",
                properties: {
                    contexts: {
                        type: "object",
                        required: true,
                        additionalProperties: {
                            type: "object",
                            required: true,
                            properties: {
                                preferences: "{that}.options.filteredSettingsSchema"
                            }
                        }
                    }
                }
            }
        ]
    },
    inputSchema: "{that}.options.combinedSettingsPrefsSchema",
    components: {
        validationMiddleware: {
            options: {
                inputSchema: "{gpii.universal.solutionsRegistry.kettle.request.http}.options.inputSchema"
            }
        }
    }
});

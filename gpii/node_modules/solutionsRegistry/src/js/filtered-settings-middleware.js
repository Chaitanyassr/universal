/* eslint-env node */
"use strict";
var fluid = require("infusion");
var gpii  = fluid.registerNamespace("gpii");

fluid.require("%kettle");
fluid.require("%gpii-json-schema");

// Add the ability to require JSON5 files.
require("json5/lib/register");

// Require universal so that we can resolve paths to it and any sub-modules.
require("../../../../../");

require("./filter-schema-settings");

fluid.registerNamespace("gpii.universal.solutionsRegistry.kettle.request.http");

gpii.universal.solutionsRegistry.kettle.request.http.generateFilteredSchema = function (baseSchema, req, rules) {
    // Derive the validation payload using the same rules as the main middleware.
    var payload = fluid.model.transformWithRules(req, rules);

    // Filter the underlying schema using the derived settings.
    var filteredSchema = gpii.universal.solutionsRegistry.filterSchemaToSettings(payload, baseSchema);
    return filteredSchema;
};

gpii.universal.solutionsRegistry.kettle.request.http.getBaseSchema = function (baseSchemaPath) {
    var resolvedPath = fluid.module.resolvePath(baseSchemaPath);
    var schema = require(resolvedPath);
    return schema;
};

fluid.defaults("gpii.universal.solutionsRegistry.kettle.request.http", {
    gradeNames: ["gpii.schema.kettle.request.http"],
    baseSchemaPath: "%gpii-universal/build/schemas/settings-schema.json",
    baseSchema: "@expand:gpii.universal.solutionsRegistry.kettle.request.http.getBaseSchema({that}.options.baseSchemaPath)",
    inputSchema: "@expand:gpii.universal.solutionsRegistry.kettle.request.http.generateFilteredSchema({that}.options.baseSchema, {request}.req, {that}.options.rules.requestContentToValidate)",
    components: {
        validationMiddleware: {
            options: {
                inputSchema: "{gpii.universal.solutionsRegistry.kettle.request.http}.options.inputSchema"
            }
        }
    }
});

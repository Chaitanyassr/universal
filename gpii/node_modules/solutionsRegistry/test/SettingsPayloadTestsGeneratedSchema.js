"use strict";
var fluid  = require("infusion");
var gpii   = fluid.registerNamespace("gpii");
var jqUnit = require("node-jqunit");

require("json5/lib/register");

var fs   = require("fs");
var path = require("path");

require("gpii-json-schema");

require("./lib/validation");

jqUnit.module("Sanity checks for test settings payloads (using generated schema).");

fluid.registerNamespace("gpii.tests.universal.solutionsRegistry.settingsPayloads");

gpii.tests.universal.solutionsRegistry.settingsPayloads.validateSettingsDir = function (that) {
    jqUnit.test("Validating preferences test data.", function () {
        var resolvedPath = fluid.module.resolvePath(that.options.settingsDataPath);
        var pathFiles = fs.readdirSync(resolvedPath);
        var jsonFiles = pathFiles.filter(function (singlePath) { return singlePath.match(/.json5?$/i); });
        var pathedJsonFiles = fluid.transform(jsonFiles, function (jsonFile) {
            return path.resolve(resolvedPath, jsonFile);
        });
        fluid.each(pathedJsonFiles, function (settingsFilePath) {
            gpii.tests.universal.solutionsRegistry.settingsPayloads.validateSettingsFile(that, settingsFilePath);
        });
    });
};

gpii.tests.universal.solutionsRegistry.settingsPayloads.validateSettingsFile = function (that, settingsFilePath) {
    var settingsSchema = require("../../../../build/schemas/settings-schema.json");

    var settingsData = {};
    try {
        settingsData = require(settingsFilePath);
    }
    catch (error) {
        jqUnit.fail("There should not be any invalid settings files (failed checking '" + settingsFilePath + "'.");
        fluid.log(error);
    }

    // Validate each file using the new "generated settings payload" schema.
    //var startTime = Date.now();
    var filteredSchema = gpii.tests.universal.solutionsRegistry.settingsPayloads.filterSchemaToSettings(settingsData, settingsSchema);
    var settingsFileIsValid = gpii.tests.universal.solutionsRegistry.validateSinglePayload(
        settingsData,
        filteredSchema, // Set this to settingsSchema to see the speed of the "unfiltered megaschema" approach.
        "settings file '" + settingsFilePath + "'"
    );
    //fluid.log("Validated single file in " + (Date.now() - startTime) + " ms.");
    jqUnit.assertTrue("The settings file should be valid.", settingsFileIsValid);
};

gpii.tests.universal.solutionsRegistry.settingsPayloads.filterSchemaToSettings = function (settingsPayload, schema) {
    var filteredSchema = fluid.copy(schema);
    var prefs = fluid.get(settingsPayload, ["flat", "contexts", "gpii-default",  "preferences"]);
    var requiredKeys = Object.keys(prefs);
    var pathToSchemaProperties = ["properties", "flat", "properties",  "contexts", "additionalProperties", "properties", "preferences", "properties"];
    var allProperties = fluid.get(schema, pathToSchemaProperties);
    var filteredProperties = fluid.filterKeys(allProperties, requiredKeys);
    fluid.set(filteredSchema, pathToSchemaProperties, filteredProperties);
    return filteredSchema;
};

fluid.defaults("gpii.tests.universal.solutionsRegistry.settingsPayloads", {
    gradeNames: ["fluid.component"],
    settingsDataPath: "%gpii-universal/testData/preferences",
    listeners: {
        "onCreate.validateSettingsDir": {
            funcName: "gpii.tests.universal.solutionsRegistry.settingsPayloads.validateSettingsDir",
            args: ["{that}"]
        }
    }
});

gpii.tests.universal.solutionsRegistry.settingsPayloads();

"use strict";
var fluid  = require("infusion");
var gpii   = fluid.registerNamespace("gpii");
var jqUnit = require("node-jqunit");

require("json5/lib/register");

var fs   = require("fs");
var path = require("path");

require("../src/js/sr-validation-middleware");

jqUnit.module("Sanity checks for test settings payloads.");

fluid.registerNamespace("gpii.tests.universal.solutionsRegistry.settingsPayloads");

gpii.tests.universal.solutionsRegistry.settingsPayloads.validateSettingsDir = function (that, validationMiddleware) {
    jqUnit.test("Validating preferences test data.", function () {
        var resolvedPath = fluid.module.resolvePath(that.options.settingsDataPath);
        var pathFiles = fs.readdirSync(resolvedPath);
        var jsonFiles = pathFiles.filter(function (singlePath) { return singlePath.match(/.json5?$/i); });
        var pathedJsonFiles = fluid.transform(jsonFiles, function (jsonFile) {
            return path.resolve(resolvedPath, jsonFile);
        });

        var promises = [];
        fluid.each(pathedJsonFiles, function (settingsFilePath) {
            var promiseFn = gpii.tests.universal.solutionsRegistry.settingsPayloads.validateSettingsFile(that, settingsFilePath, validationMiddleware);
            promises.push(promiseFn);
        });

        fluid.promise.sequence(promises).then(
            function () {
                jqUnit.assert("All test preference files are valid.");
            },
            function () {
                jqUnit.fail("All test preference files are not valid.");
            }
        );
    });
};

gpii.tests.universal.solutionsRegistry.settingsPayloads.validateSettingsFile = function (that, settingsFilePath, validationMiddleware) {
    return function () {
        var settingsData = {};
        try {
            settingsData = require(settingsFilePath);
        }
        catch (error) {
            jqUnit.fail("There should not be any invalid settings files (failed checking '" + settingsFilePath + "'.");
            fluid.log(error);
        }

        jqUnit.stop();

        // Validate each file using the new "per solution" settings validation middleware.
        var validationPromise = validationMiddleware.handle({ req: { body: settingsData }});
        validationPromise.then(
            function () {
                jqUnit.start();
                jqUnit.assert("Settings file '" + settingsFilePath + "' is valid.");
            },
            function (validationError) {
                jqUnit.start();
                jqUnit.fail("Settings file '" + settingsFilePath + "' is invalid.");

                fluid.each(validationError.errors, function (singleError) {
                    fluid.log("Validation error in file '" + settingsFilePath + "':");
                    fluid.log("  - " + singleError.dataPath.join(".") + ": " + singleError.message);
                });
            }
        );

        return validationPromise;
    };
};

fluid.defaults("gpii.tests.universal.solutionsRegistry.settingsPayloads", {
    gradeNames: ["fluid.component"],
    settingsDataPath: "%gpii-universal/testData/preferences",
    components: {
        settingsValidator: {
            type: "gpii.universal.solutionsRegistry.validators.settings"
        }
    },
    listeners: {
        "onCreate.validateSettingsDir": {
            funcName: "gpii.tests.universal.solutionsRegistry.settingsPayloads.validateSettingsDir",
            args: ["{that}", "{gpii.universal.solutionsRegistry.validators.settings}"]
        }
    }
});

gpii.tests.universal.solutionsRegistry.settingsPayloads();

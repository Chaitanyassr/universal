/*!
GPII Pouch Manager

Copyright 2016 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

/*
 * Manage the pouchDB that is used as the auth server data storage when GPII runs in the development mode.
 * Accept these options:
 * @authDBServerPort {Integer} The port number that the pouch express server runs upon.
 * @pouchConfig {Object} Configuration options to config the pouchDB. Refer to https://github.com/GPII/gpii-pouchdb/blob/master/docs/pouch-component.md on details of accepted options.
 */
fluid.defaults("gpii.pouchManager", {
    gradeNames: ["fluid.component"],
    authDBServerPort: 8058,
    components: {
        settingsDir: {
            type: "gpii.settingsDir"
        },
        pouchHarness: {
            type: "gpii.pouch.harness.persistent",
            options: {
                port: "{pouchManager}.options.authDBServerPort",
                baseDir: "@expand:{settingsDir}.getSettingsDir()",
                listeners: {
                    "onReady.escalate": "{pouchManager}.events.onPouchHarnessReady"
                },
                components: {
                    express: {
                        options: {
                            components: {
                                resetMiddleware: {
                                    type: "gpii.pouchManager.resetMiddleware",
                                    options: {
                                        events: {
                                            onPouchExpressStarted: null
                                        }
                                    }
                                }
                            },
                            events: {
                                onCreateExpressPouch: null
                            },
                            listeners: {
                                "onCreate.createExpressPouch": "{that}.events.onCreateExpressPouch.fire"
                            },
                            distributeOptions: [{
                                record: "onCreateExpressPouch",
                                target: "{that > expressPouch}.createOnEvent"
                            }, {
                                record: {
                                    "onCreate.debug": {
                                        funcName: "console.log",
                                        args: ["==== expressPouch created"]
                                    },
                                    "onCleanupComplete.debug": {
                                        funcName: "console.log",
                                        args: ["==== listener for onCleanupComplete fired"]
                                    },
                                    "afterDestroy.debug": {
                                        funcName: "console.log",
                                        args: ["==== expressPouch destroyed"]
                                    },
                                    "onStarted.debug": {
                                        funcName: "console.log",
                                        args: ["==== expressPouch started"]
                                    },
                                    "onCleanupComplete.destroyExpressPouch": {
                                        listener: "{that}.destroy",
                                    },
                                    "afterDestroy.recreateExpressPouch": "{gpii.express}.events.onCreateExpressPouch.fire",
                                    "onStarted.escalate": "{resetMiddleware}.events.onPouchExpressStarted.fire"
                                },
                                target: "{that > expressPouch}.options.listeners"
                            }]
                        }
                    }
                }
            }
        }
    },
    events: {
        onPouchHarnessReady: null,
        onExpressResetStarted: null,
        onReady: {
            events: {
                onPouchHarnessReady: "onPouchHarnessReady",
                onExpressResetStarted: "onExpressResetStarted"
            }
        }
    },
    distributeOptions: {
        distributePouchConfig: {
            source: "{that}.options.pouchConfig",
            target: "{that gpii.pouch.express}.options"
        }
    }
});

fluid.defaults("gpii.pouchManager.resetMiddleware", {
    gradeNames: ["gpii.express.middleware.requestAware"],
    path: "/reset-pouch",
    namespace: "resetMiddleware",
    method: "get",
    handlerGrades: ["gpii.pouchManager.reset.handler"]
});

fluid.defaults("gpii.pouchManager.reset.handler", {
    gradeNames: ["gpii.express.handler"],
    invokers: {
        handleRequest: {
            funcName: "gpii.pouchManager.reset.handler.reset",
            args: ["{that}", "{pouchHarness}"]
        }
    },
    listeners: {
        "{resetMiddleware}.events.onPouchExpressStarted": {
            funcName: "{that}.sendResponse",
            args: [200, "success"]
        }
    },
    responses: {
        success: {
            statusCode: 200,
            message: "Success: Pouch has been reset to the initial state."
        },
        error: {
            statusCode: 500
        }
    }
});

gpii.pouchManager.reset.handler.reset = function (that, pouchHarness) {
    console.log("=== in reset");
    pouchHarness.express.expressPouch.cleanup();
};

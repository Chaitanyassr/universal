/*!
GPII Preferences Server

Copyright 2016 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

/*
 * Manage the pouchDB as the auth server data storage when GPII runs in the development mode.
 * Accept these options:
 * @authDBServerPort {Integer} The port number that the pouchDB express server runs upon.
 * @pouchConfig {Object} Configuration options to config the pouchDB. Refer to https://github.com/GPII/gpii-pouchdb/blob/master/docs/pouch-component.md on details of accepted options.
 */
fluid.defaults("gpii.pouchManager", {
    gradeNames: ["fluid.component"],
    components: {
        settingsDir: {
            type: "gpii.settingsDir"
        },
        pouchHarness: {
            type: "gpii.pouch.harness.persistent",
            options: {
                port: "{pouchManager}.options.authDBServerPort",
                baseDir: "@expand:{settingsDir}.getSettingsDir()",
                listeners: {
                    "onReady.escalate": "{pouchManager}.events.onPouchHarnessReady"
                }
            }
        }
    },
    events: {
        onPouchHarnessReady: null
    },
    listeners: {
        "onPouchHarnessReady.debug": {
            funcName: "console.log",
            args: ["==== onPouchHarnessReady", "{that}.pouchHarness.express.options.gradeNames"]
        }
    },
    distributeOptions: {
        distributePouchConfig: {
            source: "{that}.options.pouchConfig",
            target: "{that gpii.pouch.express}.options"
        },
        distributeExpressHandlers: {
            record: "gpii.pouchManager.bindResetHandlers",
            target: "{that gpii.express}.options.gradeNames"
        }
    }
});

fluid.defaults("gpii.pouchManager.bindResetHandlers", {
    gradeNames: ["fluid.component"],
    components: {
        resetRouter: {
            type: "gpii.express.router",
            options: {
                path: "/reset-pouch",
                namespace: "resetRouter",
                method: "get",
                priority: "first",
                typeName: "gpii.pouchManager.reset.handler",
                listeners: {
                    // "onCreate.escalate": "{harness}.events.pouchStarted.fire",
                    "onCreate.debug": {
                        funcName: "console.log",
                        args: ["==== bindResetHandlers created"]
                    }
                }
            }
        }
    }
});

fluid.defaults("gpii.pouchManager.reset.handler", {
    gradeNames: ["gpii.express.handler"],
    invokers: {
        handleRequest: {
            funcName: "gpii.pouchManager.reset.resetPouch",
            args: ["{that}"]
        }
    },
    listeners: {
        "onCreate.debug": {
            funcName: "console.log",
            args: ["==== reset handler created", "{that}"]
        }
    }
});

gpii.pouchManager.reset.resetPouch = function () {
    console.log("===== reset-pouch");
};

/*!
GPII Pouch Manager

Copyright 2016 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

/*
 * Manage the pouchDB that is used as the auth server data storage when GPII runs in the development mode.
 * Accept these options:
 * @authDBServerPort {Integer} The port number that the pouch express server runs upon.
 * @resetServerPort {Integer} The port number that a express server runs upon for resetting the pouch express server runs at the port of @authDBServerPort
 *  to its initial state. Note that a separate server is needed for the reset is because the underlying library "expressPouchdb" used by gpii.pouch.express
 *  implementation is aggressive enough to respond to any http request rooted at the root.
 * @pouchConfig {Object} Configuration options to config the pouchDB. Refer to https://github.com/GPII/gpii-pouchdb/blob/master/docs/pouch-component.md on details of accepted options.
 */
fluid.defaults("gpii.pouchManager", {
    gradeNames: ["fluid.component"],
    authDBServerPort: 8058,
    resetServerPort: 8060,
    components: {
        settingsDir: {
            type: "gpii.settingsDir"
        },
        pouchHarness: {
            type: "gpii.pouch.harness.persistent",
            options: {
                port: "{pouchManager}.options.authDBServerPort",
                baseDir: "@expand:{settingsDir}.getSettingsDir()",
                listeners: {
                    "onReady.escalate": "{pouchManager}.events.onPouchHarnessReady"
                },
                components: {
                    express: {
                        options: {
                            events: {
                                onCreateExpressPouch: null
                            },
                            listeners: {
                                "onCreate.createExpressPouch": "{that}.events.onCreateExpressPouch.fire"
                            },
                            distributeOptions: [{
                                record: "onCreateExpressPouch",
                                target: "{that > expressPouch}.createOnEvent"
                            }, {
                                record: {
                                    "onCleanupComplete.destroyExpressPouch": {
                                        listener: "{gpii.express}.expressPouch.destroy"
                                    },
                                    "afterDestroy.recreateExpressPouch": "{gpii.express}.events.onCreateExpressPouch.fire",
                                    "onStarted.sendRequest": {
                                        funcName: "{gpii.pouchManager.reset.handler}.sendRequest",
                                        args: [200, "success"]
                                    }
                                },
                                target: "{that > expressPouch}.options.listeners"
                            }]
                        }
                    }
                }
            }
        },
        expressReset: {
            type: "gpii.express",
            options: {
                port: "{pouchManager}.options.resetServerPort",
                components: {
                    resetMiddleware: {
                        type: "gpii.pouchManager.resetMiddleware"
                    }
                },
                listeners: {
                    "onStarted.escalate": "{pouchManager}.events.onExpressResetStarted.fire"
                }
            }
        }
    },
    events: {
        onPouchHarnessReady: null,
        onExpressResetStarted: null,
        onReady: {
            events: {
                onPouchHarnessReady: "onPouchHarnessReady",
                onExpressResetStarted: "onExpressResetStarted"
            }
        }
    },
    distributeOptions: {
        distributePouchConfig: {
            source: "{that}.options.pouchConfig",
            target: "{that gpii.pouch.express}.options"
        }
    }
});

gpii.pouchManager.destroyExpressPouch = function (express) {
    express.expressPouch.destroy();
};

fluid.defaults("gpii.pouchManager.resetMiddleware", {
    gradeNames: ["gpii.express.middleware.requestAware"],
    path: "/reset-pouch",
    namespace: "resetMiddleware",
    method: "get",
    handlerGrades: ["gpii.pouchManager.reset.handler"]
});

fluid.defaults("gpii.pouchManager.reset.handler", {
    gradeNames: ["gpii.express.handler"],
    invokers: {
        handleRequest: {
            funcName: "gpii.pouchManager.reset.handler.reset",
            args: ["{that}", "{pouchHarness}"]
        }
    },
    responses: {
        success: {
            statusCode: 200,
            message: "Success: Pouch has been reset to the initial state."
        },
        error: {
            statusCode: 500
        }
    }
});

gpii.pouchManager.reset.handler.reset = function (that, pouchHarness) {
    pouchHarness.express.expressPouch.cleanup();
    // var resetPromise = fluid.promise.fireTransformEvent(that.events.onReset);
    // var cleanupPromise = pouchHarness.express.expressPouch.cleanup();
    // var promiseTogo = fluid.promise(1);
    // var responses = that.options.responses;
    // promiseTogo.then(function () {
    //     console.log("=== sending success response");
    //     response.status(responses.success.statusCode).send(responses.success.message);
    // }, function (err) {
    //     console.log("=== sending error response");
    //     response.status(responses.error.statusCode).send(err);
    // });
    // fluid.promise.follow(cleanupPromise, promiseTogo);
    // var cleanupPromise = pouchHarness.express.expressPouch.cleanup();
    // var responses = that.options.responses;
    // cleanupPromise.then(function () {
    //     console.log("=== cleanupPromise success callback");
    //     pouchHarness.express.events.onCreateExpressPouch.fire();
    //     pouchHarness.express.expressPouch.initDbs();
    //     console.log("=== after creating expressPouch");
    //     response.status(responses.success.statusCode).send(responses.success.message);
    // }, function (err) {
    //     console.log("=== cleanupPromise error callback");
    //     response.status(responses.error.statusCode).send(err);
    // });
};

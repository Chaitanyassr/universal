/*!
GPII Access Requester

Copyright 2017 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

/* global document, fluid, gpii, jQuery, jqUnit */

(function ($) {
    "use strict";

    fluid.registerNamespace("gpii.tests.accessRequester");

    gpii.tests.accessRequester.gpiiToken = "gpii-token-test";
    gpii.tests.accessRequester.url = "/access_token";

    fluid.defaults("gpii.tests.accessRequester", {
        gradeNames: ["gpii.accessRequester"],
        gpiiToken: gpii.tests.accessRequester.gpiiToken,
        url: gpii.tests.accessRequester.url,
        clientCredentialDataSourceGrade: "kettle.dataSource.file"
    });

    gpii.tests.accessRequester.testCases = [{
        testName: "An access token is received successfully",
        clientCredentialFilePath: "../data/clientCredential-correct.json",
        mockjaxInfo: {
            url: gpii.tests.accessRequester.url,
            type: "post",
            data: "{\"grant_type\":\"password\",\"client_id\":\"pilot-computer\",\"client_secret\":\"pilot-computer-secret\",\"username\": \"" + gpii.tests.accessRequester.gpiiToken + "\",\"password\":\"dummy\"}",
            status: 200,
            responseText: {
                access_token: "access-token-test",
                expiresIn: 3600,
                token_type: "Bearer"
            }
        },
        isSuccess: true
    // }, {
    //     testName: "The request of an access token is rejected when a wrong client credential is provided",
    //     clientCredentialFilePath: "../data/clientCredential-wrong.json",
    //     mockjaxInfo: {
    //         url: gpii.tests.accessRequester.url,
    //         type: "post",
    //         data: "{\"grant_type\":\"password\",\"client_id\":\"wrong-client-id\",\"client_secret\":\"wrong-client-secret\",\"username\": \"" + gpii.tests.accessRequester.gpiiToken + "\",\"password\":\"dummy\"}",
    //         status: 401,
    //         responseText: {
    //             isError: true,
    //             message: "Unauthorized"
    //         }
    //     },
    //     isSuccess: false
    }];

    fluid.each(gpii.tests.accessRequester.testCases, function (testCase) {
        $.mockjax(testCase.mockjaxInfo);
console.log(testCase);
        jqUnit.asyncTest(testCase.testName, function () {
            var accessRequester = gpii.tests.accessRequester({
                distributeOptions: {
                    record: testCase.clientCredentialFilePath,
                    target: "{that > clientCredentialDataSource}.options.path"
                }
            });

            var accessTokenPromise = accessRequester.getAccessToken();
            accessTokenPromise.then(function (accessTokenObj) {
                if (testCase.isSuccess) {
                    jqUnit.assertNotUndefined("The access token is received", accessTokenObj.access_token);
                    jqUnit.assertNotUndefined("The expiresIn is received", accessTokenObj.expiresIn);
                } else {
                    jqUnit.assertTrue("The error is received", accessTokenObj.isError);
                }
                jqUnit.start();
            });
        });
    });

})(jQuery);

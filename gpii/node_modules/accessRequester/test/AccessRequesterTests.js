/*!
GPII Access Requester

Copyright 2017 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii"),
    kettle = require("kettle"),
    querystring = require("querystring"),
    nock = require("nock");

require("accessRequester");
fluid.require("%universal/gpii/node_modules/gpii-oauth2/gpii-oauth2-datastore/test/js/DataStoreTestsUtils.js");

kettle.loadTestingSupport();

fluid.registerNamespace("gpii.tests.accessRequester");

gpii.tests.accessRequester.gpiiToken = "gpii-token-test";
gpii.tests.accessRequester.hostname = "http://localhost:6666";
gpii.tests.accessRequester.url = "/access_token";

gpii.tests.accessRequester.testCases = {
    "success": {
        clientCredentialFilePath: "data/clientCredential-correct.json",
        nockConfig: {
            data: {
                "grant_type": "password",
                "username": gpii.tests.accessRequester.gpiiToken,
                "password": "dummy",
                "client_id": "pilot-computer",
                "client_secret": "pilot-computer-secret"
            },
            status: 200,
            response: {
                access_token: "access-token-test",
                expiresIn: 3600,
                token_type: "Bearer"
            }
        }
    },
    "error_wrongClientCredential": {
        clientCredentialFilePath: "data/clientCredential-wrong.json",
        nockConfig: {
            url: gpii.tests.accessRequester.url,
            type: "post",
            data: {
                "grant_type": "password",
                "username": gpii.tests.accessRequester.gpiiToken,
                "password": "dummy",
                "client_id": "wrong-client-id",
                "client_secret": "wrong-client-secret"
            },
            status: 401,
            response: {
                isError: true,
                message: "Unauthorized"
            }
        },
        expected: {
            statusCode: 401,
            isError: true
        }
    },
    "error_missingClientCredentialFile": {
        clientCredentialFilePath: "non-existing.json",
        expected: {
            statusCode: 404,
            isError: true
        }
    }
};

// Set up mock ajax responses
gpii.tests.accessRequester.setupNock = function (config) {
    var cloudMock = nock(gpii.tests.accessRequester.hostname);

    // log nock matches
    cloudMock.log(console.log);

    // mock POST requests to "/access_token"
    cloudMock.post(gpii.tests.accessRequester.url, "\"" + querystring.stringify(config.data) + "\"")
        .reply(config.status, config.response);
};

// Tear down mock ajax environment when the test is over
gpii.tests.accessRequester.teardownNock = function () {
    nock.isDone();
    nock.cleanAll();
    nock.restore();
};

// The customized accessRequester component for tests
fluid.defaults("gpii.tests.accessRequester", {
    gradeNames: ["gpii.accessRequester"],
    gpiiToken: gpii.tests.accessRequester.gpiiToken,
    url: gpii.tests.accessRequester.hostname + gpii.tests.accessRequester.url,
    clientCredentialDataSourceGrade: "gpii.accessRequester.clientCredentialDataSource.file"
});

// The base testEnvironment grade to be inherited by all tests
fluid.defaults("gpii.tests.accessRequesterTests", {
    gradeNames: ["fluid.test.testEnvironment"],
    clientCredentialFilePath: null,    // supplied by individual tests
    testCaseHolderGrade: null,   // supplied by individual tests
    distributeOptions: {
        clientCredentialFilePath: {
            source: "{that}.options.clientCredentialFilePath",
            target: "{that clientCredentialDataSource}.options.path"
        },
        testCaseHolderGrade: {
            source: "{that}.options.testCaseHolderGrade",
            target: "{that > testCaseHolder}.type"
        }
    },
    components: {
        accessRequester: {
            type: "gpii.tests.accessRequester"
        },
        testCaseHolder: {
            type: "fluid.test.testCaseHolder"
        }
    }
});

// The base testCaseHolder grade to be inherited by test case holders used by all tests
fluid.defaults("gpii.tests.accessRequester.testCaseHolder", {
    gradeNames: "fluid.test.testCaseHolder",
    events: {
        onResponse: null,
        onError: null
    }
});

// 1. A successful workflow
fluid.defaults("gpii.tests.accessRequester.testCaseHolder.success", {
    gradeNames: "gpii.tests.accessRequester.testCaseHolder",
    modules: [{
        name: "The access requester module tests - a successful workflow",
        expect: 1,
        tests: [{
            name: "An access token is received",
            sequence: [{
                funcName: "gpii.tests.accessRequester.setupNock",
                args: [gpii.tests.accessRequester.testCases.success.nockConfig]
            }, {
                func: "gpii.tests.oauth2.invokePromiseProducer",
                args: ["{accessRequester}.getAccessToken", [], "{that}"]
            }, {
                listener: "jqUnit.assertDeepEq",
                args: ["The response is expected with an access token", gpii.tests.accessRequester.testCases.success.nockConfig.response, "{arguments}.0"],
                event: "{that}.events.onResponse"
            }]
        }]
    }]
});

fluid.defaults("gpii.tests.accessRequesterTests.success", {
    gradeNames: ["gpii.tests.accessRequesterTests"],
    clientCredentialFilePath: gpii.tests.accessRequester.testCases.success.clientCredentialFilePath,
    testCaseHolderGrade: "gpii.tests.accessRequester.testCaseHolder.success"
});

// 2. Error occurs due to the wrong client credentials
fluid.defaults("gpii.tests.accessRequester.testCaseHolder.error.wrongClientCredential", {
    gradeNames: "gpii.tests.accessRequester.testCaseHolder",
    modules: [{
        name: "The access requester module tests - a failed workflow due to the wrong client credential",
        expect: 1,
        tests: [{
            name: "The request for an access token is rejected due to the wrong client credential",
            sequence: [{
                funcName: "gpii.tests.accessRequester.setupNock",
                args: [gpii.tests.accessRequester.testCases.error_wrongClientCredential.nockConfig]
            }, {
                func: "gpii.tests.oauth2.invokePromiseProducer",
                args: ["{accessRequester}.getAccessToken", [], "{that}"]
            }, {
                listener: "jqUnit.assertLeftHand",
                args: ["The error is received", gpii.tests.accessRequester.testCases.error_wrongClientCredential.expected, "{arguments}.0"],
                event: "{that}.events.onError"
            }, {
                // Make sure teardownNock() is run after all nock required actions are done
                funcName: "gpii.tests.accessRequester.teardownNock"
            }]
        }]
    }]
});

fluid.defaults("gpii.tests.accessRequesterTests.error.wrongClientCredential", {
    gradeNames: ["gpii.tests.accessRequesterTests"],
    clientCredentialFilePath: gpii.tests.accessRequester.testCases.error_wrongClientCredential.clientCredentialFilePath,
    testCaseHolderGrade: "gpii.tests.accessRequester.testCaseHolder.error.wrongClientCredential"
});

// 3. Error occurs due to the missing client credential file
fluid.defaults("gpii.tests.accessRequester.testCaseHolder.error.missingClientCredentialFile", {
    gradeNames: "gpii.tests.accessRequester.testCaseHolder",
    modules: [{
        name: "The access requester module tests - a failed workflow due to the missing client credential file",
        expect: 1,
        tests: [{
            name: "The request for an access token is rejected due to the missing client credential file",
            sequence: [{
                func: "gpii.tests.oauth2.invokePromiseProducer",
                args: ["{accessRequester}.getAccessToken", [], "{that}"]
            }, {
                listener: "jqUnit.assertLeftHand",
                args: ["The response is expected with an access token", gpii.tests.accessRequester.testCases.error_missingClientCredentialFile.expected, "{arguments}.0"],
                event: "{that}.events.onError"
            }]
        }]
    }]
});

fluid.defaults("gpii.tests.accessRequesterTests.error.missingClientCredentialFile", {
    gradeNames: ["gpii.tests.accessRequesterTests"],
    clientCredentialFilePath: gpii.tests.accessRequester.testCases.error_missingClientCredentialFile.clientCredentialFilePath,
    testCaseHolderGrade: "gpii.tests.accessRequester.testCaseHolder.error.missingClientCredentialFile"
});

// Run all tests
fluid.test.runTests([
    "gpii.tests.accessRequesterTests.success",
    "gpii.tests.accessRequesterTests.error.wrongClientCredential",
    "gpii.tests.accessRequesterTests.error.missingClientCredentialFile"
]);

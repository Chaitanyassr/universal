/*!
GPII Settings Transformer Tests

Copyright 2012 OCAD University
Copyright 2013-2014 Raising the Floor

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global jqUnit */

"use strict";

var fluid = fluid || require("infusion"),
    gpii = fluid.registerNamespace("gpii"),
	jqUnit = fluid.require("jqUnit");

(function () {
    fluid.registerNamespace("gpii.tests.contextManager.utils");

    /* --------------- gpii.contextManager.utils.findActiveContexts tests -------------- */
    var findActiveContextsTests = {
        matchData: {
        }
    }



    /* --------------- gpii.contextManager.transforms.inRange tests -------------------- */
    var inRangeTests = {
        rules: {
            minOnly: {
                "foo": {
                    "transform": {
                        "type": "gpii.contextManager.transforms.inRange",
                        "inputPath": "bar",
                        "min": 100
                    }
                }
            },
            maxOnly: {
                "foo": {
                    "transform": {
                        "type": "gpii.contextManager.transforms.inRange",
                        "inputPath": "bar",
                        "max": 200
                    }
                }
            },
            minAndMax: {
                "foo": {
                    "transform": {
                        "type": "gpii.contextManager.transforms.inRange",
                        "inputPath": "bar",
                        "min": 100,
                        "max": 200
                    }
                }
            }
        },
        expects: {
            "Min only - below threshold": {
                rule: "minOnly",
                input: {
                    bar: 23
                },
                expected: {
                    foo: false
                }
            },
            "Min only - on threshold": {
                rule: "minOnly",
                input: {
                    bar: 100
                },
                expected: {
                    foo: true
                }
            },
            "Min only - above threshold": {
                rule: "minOnly",
                input: {
                    bar: 100
                },
                expected: {
                    foo: true
                }
            },
            "Max only - below threshold": {
                rule: "maxOnly",
                input: {
                    bar: 23
                },
                expected: {
                    foo: true
                }
            },
            "Max only - on threshold": {
                rule: "maxOnly",
                input: {
                    bar: 200
                },
                expected: {
                    foo: true
                }
            },
            "Max only - above threshold": {
                rule: "maxOnly",
                input: {
                    bar: 2100
                },
                expected: {
                    foo: false
                }
            },
            "Min and Max - above threshold": {
                rule: "minAndMax",
                input: {
                    bar: 2100
                },
                expected: {
                    foo: false
                }
            },
            "Min and Max - within range": {
                rule: "minAndMax",
                input: {
                    bar: 160
                },
                expected: {
                    foo: true
                }
            },
            "Min and Max - below threshold": {
                rule: "minAndMax",
                input: {
                    bar: 21
                },
                expected: {
                    foo: false
                }
            }
        }
    };

    jqUnit.test("gpii.contextManager.transforms.inRange tests", function () {
        fluid.each(inRangeTests.expects, function (test, tname) {
            var transformed = fluid.model.transformWithRules(test.input, inRangeTests.rules[test.rule]);
            jqUnit.assertDeepEq("inRange transformation tests - " + tname, test.expected, transformed);
        });
    });
}());

/*
 * eventLog Tests
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal"),
    fs = require("fs"),
    os = require("os"),
    readline = require("readline");

var jqUnit = fluid.require("node-jqunit");
var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.tests.eventLog");

require("../src/eventLog.js");

var teardowns = [];

jqUnit.module("gpii.tests.eventLog", {
    teardown: function () {
        while (teardowns.length) {
            teardowns.pop()();
        }
    }
});

gpii.tests.eventLog.installID = "installation-id";

gpii.tests.eventLog.testDefs = fluid.freezeRecursive(fluid.transform([
    {
        // data object
        testData: {
            func: "log",
            args: ["module0", "event0", {"data0": "value0"}]
        },
        expected: {
            "module": "module0",
            "event": "event0",
            "data": {"data0": "value0"}
        }
    },
    {
        // no data
        testData: {
            func: "log",
            args: ["module1", "event1"]
        },
        expected: {
            "module": "module1",
            "event": "event1"
        }
    },
    {
        // data string
        testData: {
            func: "log",
            args: ["module2", "event2", "value2"]
        },
        expected: {
            "module": "module2",
            "event": "event2",
            "data": {"value": "value2"}
        }
    },
    {
        // data number
        testData: {
            func: "log",
            args: ["module3", "event3", 1234]
        },
        expected: {
            "module": "module3",
            "event": "event3",
            "data": {"value": 1234}
        }
    },
    {
        // empty data
        testData: {
            func: "log",
            args: ["module4", "event4", {}]
        },
        expected: {
            "module": "module4",
            "event": "event4"
        }
    },
    {
        // null data
        testData: {
            func: "log",
            args: ["module5", "event5", null]
        },
        expected: {
            "module": "module5",
            "event": "event5"
        }
    },
    {
        // timerId
        testData: {
            func: "log",
            args: ["module6", "event6", {}, "timer-id1"]
        },
        expected: {
            "module": "module6",
            "event": "event6"
        }
    },
    {
        // logDuration, timerId from previous
        testData: {
            func: "logDuration",
            args: ["module7", "event7", {}, "timer-id1"]
        },
        expected: {
            "module": "module7",
            "event": "event7",
            "data": {"duration": 0}
        }
    },
    {
        // null data, timerId
        testData: {
            func: "log",
            args: ["module8", "event8", null, "timer-id2"]
        },
        expected: {
            "module": "module8",
            "event": "event8"
        }
    },
    {
        // logDuration, null data, timerId from previous
        testData: {
            func: "logDuration",
            args: ["module9", "event9", null, "timer-id2"]
        },
        expected: {
            "module": "module9",
            "event": "event9",
            "data": {"duration": 0}
        }
    },
    {
        // logDuration, unknown timerId
        testData: {
            func: "logDuration",
            args: ["module10", "event10", {}, "timer-unknown1"]
        },
        expected: {
            "module": "module10",
            "event": "event10",
            "data": {"duration": 0}
        }
    },
    {
        // defer + logDeferred
        testData: [{
                func: "defer",
                args: ["module11", "event11", {}, "timer-id3"]
            }, {
                func: "logDeferred",
                args: ["timer-id3"]
            }],
        expected: {
            "module": "module11",
            "event": "event11",
            "data": {"duration": 0}
        }
    },
    {
        // defer, null data
        testData: [{
                func: "defer",
                args: ["module12", "event12", null, "timer-id4"]
            }, {
                func: "logDeferred",
                args: ["timer-id4"]
            }],
        expected: {
            "module": "module12",
            "event": "event12",
            "data": {"duration": 0}
        }
    }
], function (item) {
    item.installID = gpii.tests.eventLog.installID;
    return item;
}));

/**
 * Checks a log line.
 *
 * @param line {String} The log lone.
 * @param expected {Object} What it should parse into.
 */
gpii.tests.eventLog.checkLogLine = function (line, expected) {
    jqUnit.assertTrue("Line should look like a JSON object", !!line.match(/^{.*}$/));
    var obj = JSON.parse(line);
    jqUnit.assertEquals("JSON should be an object", "object", typeof(obj));

    // The time property is tricky to predict precisely, so just make sure it parses to a time within 5 seconds.
    jqUnit.assertTrue("Log entry must have a time property", obj.hasOwnProperty("time"));
    var time = Date.parse(obj.time);
    jqUnit.assertFalse("time property should be a valid timestamp", isNaN(time));
    var ago = Date.now() - time;
    var recent = ago >= 0 && ago < 5000;
    jqUnit.assertTrue("time property should have been the current time", recent);
    delete obj.time;

    // Same for data.duration
    if (obj.data && obj.data.hasOwnProperty("duration")) {
        jqUnit.expect(2);
        jqUnit.assertTrue("data.duration property should be >= 0", obj.data.duration >= 0);
        jqUnit.assertTrue("data.duration property shouldn't be more than 5 seconds", obj.data.duration < 5);
        obj.data.duration = 0;
    }

    jqUnit.assertDeepEq("Parsed log should match expected", expected, obj);
};

/**
 * Checks an entire log file.
 *
 * @param logFile {String} The log file
 * @param expected {Object[]} Array of objects expected for each line.
 */
gpii.tests.eventLog.checkLogFile = function (logFile, expected) {
    var reader = readline.createInterface({
        input: fs.createReadStream(logFile)
    });

    // Inspect each line of the log, making sure each one parses into the expected object.
    var lineNumber = 0;
    reader.on("line", function (line) {
        console.log("Log line", lineNumber, line);

        if (lineNumber >= expected.length) {
            jqUnit.fail("Log file should not contain more data.");
            return;
        }
        gpii.tests.eventLog.checkLogLine(line, expected[lineNumber]);
        lineNumber++;
    });
    reader.on("close", function (line) {
        jqUnit.start();
    });
};

jqUnit.asyncTest("eventLog tests #1", function () {
    var tests = gpii.tests.eventLog.testDefs;

    jqUnit.expect(tests.length * 6);

    var logFile = os.tmpdir() + "/gpii-test-eventLog-" + Date.now();
    teardowns.push(function() {
        fs.unlinkSync(logFile);
    });

    gpii.eventLog.logFilePath = logFile;

    gpii.eventLog.setInstallId(gpii.tests.eventLog.installID);
    var expected = [];

    // Log the test data
    for (var n = 0; n < tests.length; n++) {
        var test = tests[n];
        var calls = fluid.makeArray(test.testData);
        while (calls.length) {
            var call = calls.shift();
            gpii.eventLog[call.func].apply(null, call.args);
        }

        expected.push(test.expected);
    }

    gpii.tests.eventLog.checkLogFile(logFile, expected);
});

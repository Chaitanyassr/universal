/*
 * Event logging.
 * This acts upon events that are deemed interesting enough to be recorded and sent to a log server for analysis. The
 * log produced here is in JSON and sent to a different output than the usual fluid.log.
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");
var fs = require("fs"),
    path = require("path");

var gpii = fluid.registerNamespace("gpii"),
    $ = fluid.registerNamespace("jQuery");

fluid.registerNamespace("gpii.eventLog");

fluid.defaults("gpii.eventLog", {
    gradeNames: ["fluid.component", "fluid.contextAware"],
    contextAwareness: {
        platform: {
            checks: {
                windows: {
                    contextValue: "{gpii.contexts.windows}",
                    gradeNames: "gpii.eventLog.windows"
                }
            }
        }
    },
    components: {
        installID: {
            type: "gpii.installID"
        }
    },
    invokers: {
        logEvent: "gpii.eventLog.log",
        logTimedEvent: "gpii.eventLog.logDuration"
    },
    listeners: {
        "onCreate.installId": {
            func: "gpii.eventLog.setInstallId",
            args: ["@expand:{that}.installID.getInstallID()"]
        },
        "onCreate.log": {
            func: "{that}.logEvent",
            args: ["gpii", "Start", {}, "gpii-start"]
        },
        "onDestroy.log": {
            func: "{that}.logTimedEvent",
            args: ["gpii", "Stop", {}, "gpii-start"]
        },
        "{lifecycleManager}.events.onSessionStart": {
            namespace: "eventLog",
            func: "{that}.logEvent",
            args: ["lifecycle", "SessionStart", {userToken: "{arguments}.1"}]
        },
        "{lifecycleManager}.events.onSessionStop": {
            namespace: "eventLog",
            func: "{that}.logTimedEvent",
            args: [
                "lifecycle",
                "SessionStop",
                {userToken: "{arguments}.1.model.userToken"},
                "{arguments}.1.createTime",
                "sessionTime"
            ]
        }
    }
});

/**
 * The timers for timed events.
 */
gpii.eventLog.timers = {};

/**
 * The outstanding log entries waiting for their duration.
 */
gpii.eventLog.pendingLogs = {};

/**
 * The log file.
 */
gpii.eventLog.logFilePath = null;

/**
 * The installation ID
 */
gpii.eventLog.installationID = null;

/**
 * Gets (and stores) the installation ID.
 * @param installationId The installation ID.
 */
gpii.eventLog.setInstallId = function (installationId) {
    gpii.eventLog.installationID = installationId;
};

/**
 * Returns the actual Date and time
 */
gpii.eventLog.getTimestamp = function () {
    return new Date();
};

/**
 * Creates an object for the log. Everything in this object is what will be logged, and the "time" field will be added
 * later when it is actually logged.
 *
 * @param moduleName {String} The part of GPII causing this event.
 * @param event {String} Name of the event.
 * @param data [optional] Event specific data.
 * @param level {Object} [optional] Level of the log, see fluid.logLevelsSpec [FATAL,FAIL,WARN,IMPORTANT,INFO,TRACE].
 * @return {Object} The log object.
 */
gpii.eventLog.createLogObject = function (moduleName, event, data, level) {
    var eventObject = {
        module: moduleName || "GPII",
        event: event,
        level: level
    };

    var dataWrapped = gpii.eventLog.wrapData(data);
    if (dataWrapped !== null) {
        eventObject.data = fluid.copy(dataWrapped);
    }
    return eventObject;
};

/**
 * Logs an event.
 *
 * If this event is the start of something (like "StartSession"), then fill in the timerId parameter and log the
 * corresponding "end" event (eg, "StopSession") using logDuration().
 *
 * @param moduleName {String} The part of GPII causing this event.
 * @param event {String} The event name.
 * @param data {Object} [optional] Event specific data.
 * @param level {Object} [optional] Level of the log, see fluid.logLevelsSpec [FATAL,FAIL,WARN,IMPORTANT,INFO,TRACE].
 * @param timerId {String} [optional] Unique identifier for a timer, if this event is the start of a duration.
 */
gpii.eventLog.log = function (moduleName, event, data, level, timerId) {
    var eventObject = gpii.eventLog.createLogObject(moduleName, event, data);
    if (timerId) {
        gpii.eventLog.startTimer(timerId);
    }

    gpii.eventLog.writeLog(level, eventObject);
};

/**
 * Logs an event, where the event marks the end of a duration. This will add a "duration" field to the data object with
 * the number of seconds since the corresponding start event (the same timerId).
 *
 * There should already have been a call to eventLog.log with a corresponding timerId.
 *
 * @param moduleName {String|Object} The part of GPII causing this event, or an object containing the module, event, and
 * data (this object will be modified).
 * @param event {String} The event name.
 * @param data {Object} [optional] Event specific data.
 * @param level {Object} [optional] Level of the log, see fluid.logLevelsSpec [FATAL,FAIL,WARN,IMPORTANT,INFO,TRACE].
 * @param timerId {Number|String} The timerId (or a start time (ms)).
 */
gpii.eventLog.logDuration = function (moduleName, event, data, level, timerId) {
    var eventObject;

    if (moduleName && moduleName.module) {
        eventObject = moduleName;
    } else {
        eventObject = gpii.eventLog.createLogObject(moduleName, event, data);
    }

    var duration = gpii.eventLog.stopTimer(timerId);
    if (duration || duration === 0) {
        if (!eventObject.data) {
            eventObject.data = {};
        }
        eventObject.data.duration = duration;
    }

    gpii.eventLog.writeLog(level, eventObject);
};

/**
 * Defers logging of an event until a later time (when logDeferred() is called with the same timerId, or the application
 * exits).
 *
 * The purpose of this function is to prepare a duration log entry for later, but without requiring the caller to
 * remember the details when the duration is over. This entry will be logged if GPII closes before a corresponding call
 * of logDeferred.
 *
 * @param moduleName {String} The part of GPII causing this event.
 * @param event {String} The event name.
 * @param data {Object} Event specific data.
 * @param level {Object} [optional] Level of the log, see fluid.logLevelsSpec [FATAL,FAIL,WARN,IMPORTANT,INFO,TRACE].
 * @param timerId {String} The timerId.
 */
gpii.eventLog.defer = function (moduleName, event, data, level, timerId) {
    if (!timerId) {
        timerId = level;
        level = null;
    }
    gpii.eventLog.startTimer(timerId);
    gpii.eventLog.pendingLogs[timerId] = gpii.eventLog.createLogObject(moduleName, event, data, level);
};

/**
 * Logs a deferred entry, setting the duration field to the data object.
 *
 * @param timerId {String} The same timerId for the call to defer().
 */
gpii.eventLog.logDeferred = function (timerId) {
    var eventObject = gpii.eventLog.pendingLogs[timerId];
    if (eventObject) {
        delete gpii.eventLog.pendingLogs[timerId];

        gpii.eventLog.logDuration(eventObject, null, null, null, timerId);
    } else {
        fluid.log("logDeferred: Unknown timerId", timerId);

    }
};

/**
 * Logs an error.
 *
 * @param moduleName {String} The part of GPII causing this error.
 * @param errType {String} Type of error.
 * @param err {Object} The error.
 */
gpii.eventLog.logError = function (moduleName, errType, err) {
    var data = {};
    if (err instanceof Error) {
        // Error doesn't serialise
        data.error = {};
        fluid.each(Object.getOwnPropertyNames(err), function (a) {
            data.error[a] = err[a];
        });
    } else {
        data.error = err;
    }
    gpii.eventLog.log(moduleName, "Error." + errType, data, fluid.logLevel.FAIL);
};

// Log uncaught exceptions.
fluid.onUncaughtException.addListener(function (err) {
    gpii.eventLog.logError(null, "UncaughtException", err);
}, "gpii-eventLog");

// Log fluid.fail.
fluid.failureEvent.addListener(function (args) {
    var err = Array.isArray(args) ? args.join(" ") : err;
    gpii.eventLog.logError(null, "Failure", err);
}, "gpii-eventLog", "before:fail");

/**
 * Gets the path of the new log file for this instance of gpii.
 *
 * @return {String} Path of the log file.
 */
gpii.eventLog.getLogFilePath = function () {
    if (!gpii.eventLog.logFilePath) {
        var startupTime = Date.now();
        gpii.eventLog.logFilePath = process.env.GPII_EVENT_LOG;

        if (!gpii.eventLog.logFilePath) {
            var settingsDirComponent = gpii.settingsDir();
            var gpiiSettingsDir = settingsDirComponent.getGpiiSettingsDir();
            gpii.eventLog.logFilePath =
                path.join(gpiiSettingsDir, "gpii-" + gpii.journal.formatTimestamp(startupTime) + ".log");
        }

        fluid.log(fluid.logLevel.IMPORTANT, "Writing event log to " + gpii.eventLog.logFilePath);
    }
    return gpii.eventLog.logFilePath;
};

/**
 * Writes an event to the log file.
 *
 * @param level {Object} Level of the log, see fluid.logLevelsSpec [FATAL,FAIL,WARN,IMPORTANT,INFO,TRACE].
 * @param event {Object} The object.
 */
gpii.eventLog.writeLog = function (level, event) {
    var intLevel = gpii.eventLog.checkLevel(level);
    event.level = intLevel.value;

    // Log to console before the installation ID and timestamp are added (no one wants to see it).
    fluid.log(intLevel, event);

    if (!gpii.eventLog.logFilePath) {
        gpii.eventLog.logFilePath = gpii.eventLog.getLogFilePath();
    }

    event.installID = gpii.eventLog.installationID;
    event.timestamp = gpii.eventLog.getTimestamp();
    fs.appendFileSync(gpii.eventLog.logFilePath, JSON.stringify(event) + "\n");
};

/**
 * Starts a timer.
 *
 * @param timerId {String} Something to identify the timer.
 */
gpii.eventLog.startTimer = function (timerId) {
    // hrtime used instead of Date.now to ignore time changes.
    gpii.eventLog.timers[timerId] = process.hrtime();
};

/**
 * Stops a timer (removes it from the collection), and returns the time in seconds since it started.
 *
 * @param timerId {String} Something to identify the timer.
 * @return {Number} Number of seconds since the start of the timer.
 */
gpii.eventLog.stopTimer = function (timerId) {
    var seconds = 0;
    var start = gpii.eventLog.timers[timerId];
    if (start) {
        var duration = process.hrtime(start);
        // Round to the nearest second.
        seconds = duration[0] + (duration[1] < 5e8 ? 0 : 1);
    }
    return seconds;
};

/**
 * Ensures a value is an object. If it's not an object, return an object containing it.
 * Null, empty object, or undefined returns null.
 *
 * @param data The value to work with.
 * @return {object} The given object, or new object with a field "value" set to data
 */
gpii.eventLog.wrapData = function (data) {
    var dataTogo;

    if (data === null || data === undefined) {
        dataTogo = null;
    } else if (fluid.isPlainObject(data, true)) {
        dataTogo = $.isEmptyObject(data) ? null : data;
    } else {
        dataTogo = {value: data};
    }

    return dataTogo;
};

/**
 * Ensure that the loglevel has a valid value. The levels are defined in the fluid.logLevelsSpec
 * Sets INFO as default loglevel
 *
 * @param level to check, can be a string that represents the value or a property of fluid.logLevel
 * @return a valid fluid.logLevel, with INFO as default
 */
gpii.eventLog.checkLevel = function (level) {
    if (typeof level === "string" && level in fluid.logLevelsSpec) {
        return fluid.logLevel[level];
    } else {
        return fluid.isLogLevel(level) ? level : fluid.logLevel.INFO;
    }
};

fluid.defaults("gpii.eventLog.log", {
    gradeNames: "fluid.function"
});

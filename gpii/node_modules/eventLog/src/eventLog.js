/*
 * Event logging.
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");
var fs = require("fs");

var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.eventLog");

fluid.defaults("gpii.eventLog", {
    gradeNames: "fluid.component",
    invokers: {
        logEvent: "gpii.eventLog.log",
        logTimedEvent: "gpii.eventLog.logTimed"
    },
    listeners: {
        "onCreate.log": {
            func: "{that}.logEvent",
            args: ["gpii", "Start", {}, "gpii-start"]
        },
        "onDestroy.log": {
            func: "{that}.logTimedEvent",
            args: ["gpii", "Stop", {}, "gpii-start"]
        },
        "{lifecycleManager}.events.onSessionStart": {
            namespace: "eventLog",
            func: "{that}.logEvent",
            args: ["lifecycle", "SessionStart", {userToken: "{arguments}.1"}]
        },
        "{lifecycleManager}.events.onSessionStop": {
            namespace: "eventLog",
            func: "{that}.logTimedEvent",
            args: [
                "lifecycle",
                "SessionStop",
                {userToken: "{arguments}.1.model.userToken"},
                "{arguments}.1.createTime",
                "sessionTime"
            ]
        }
    }
});

/**
 * The timers for timed events.
 */
gpii.eventLog.timers = {};

/**
 * The outstanding time-span related events.
 */
gpii.eventLog.deferredEvents = {};

/**
 * The log file.
 */
gpii.eventLog.logFilePath = null;

gpii.eventLog.createEvent = function (module, event, data) {
    var eventObject = {
        module: module,
        event: event
    };

    var dataWrapped = gpii.eventLog.wrapData(data);
    if (dataWrapped !== null) {
        eventObject.data = fluid.copy(dataWrapped);
    }
    return eventObject;
};

/**
 * Logs an event.
 *
 * @param module {String} The part of GPII causing this event.
 * @param event {String} The event name.
 * @param data {Object} [optional] Event specific data.
 * @param timerId {String} [optional] Unique identifier for a timer, if this event is the start of something.
 */
gpii.eventLog.log = function (module, event, data, timerId) {

    var eventObject = gpii.eventLog.createEvent(module, event, data);
    if (timerId) {
        gpii.eventLog.startTimer(timerId);
    }

    gpii.eventLog.writeLog(eventObject);
};

/**
 * Logs an event, where the event marks the end of something. This will add a time field to the data object with the
 * number of seconds since the corresponding start event with the same timerId.
 *
 * There should already have been a call to eventLog.log with a corresponding timerId.
 *
 * @param module {String|Object} The part of GPII causing this event (or the event object).
 * @param event {String} The event name.
 * @param data {Object} [optional] Event specific data.
 * @param timerId {Number|String} The timerId (or a start time (ms)).
 * @param timeField {String} [optional] The field name for the time on the "data" object. Default: "time".
 */
gpii.eventLog.logTimed = function (module, event, data, timerId, timeField) {
    var eventObject;

    if (typeof(module) === "string") {
        eventObject = gpii.eventLog.createEvent(module, event, data);
    } else {
        eventObject = module;
    }

    if (!eventObject.data) {
        eventObject.data = {};
    }
    eventObject.data[timeField || "time"] = gpii.eventLog.stopTimer(timerId);

    gpii.eventLog.writeLog(eventObject);
};

/**
 * Defers logging of an event until a later time (when doTimed is called with the same timerId, or application exits).
 *
 * The purpose of this function is to ensure GPII remembers to record the timed event upon shutdown, otherwise the last
 * entry will be lost.
 *
 * @param module {String} The part of GPII causing this event.
 * @param event {String} The event name.
 * @param data {Object} [optional] Event specific data.
 * @param timerId {Number|String} The timerId (or a start time (ms)).
 * @param timeField {String} [optional] The field name for the time on the "data" object. Default: "time".
 */
gpii.eventLog.deferTimed = function (module, event, data, timerId, timeField) {
    var eventObject = gpii.eventLog.createEvent(module, event, data);

    gpii.eventLog.startTimer(timerId);
    gpii.eventLog.deferredEvents[timerId] = eventObject;
};

/**
 * Logs an event that was started with deferTimed.
 *
 * @param timerId
 */
gpii.eventLog.doTimed = function (timerId) {
    var eventObject = gpii.eventLog.deferredEvents[timerId];
    if (!eventObject) {
        fluid.fail("Unknown timerId", timerId);
    }
    delete gpii.eventLog.deferredEvents[timerId];

    gpii.eventLog.logTimed(eventObject, null, null, timerId);
};

/**
 * Gets the path of the new log file for this instance of gpii.
 *
 * @return {String} Path of the log file.
 */
gpii.eventLog.getLogFilePath = function () {
    if (!gpii.eventLog.logFilePath) {
        var settingsDirComponent = gpii.settingsDir();
        var gpiiSettingsDir = settingsDirComponent.getGpiiSettingsDir();

        var startupTime = Date.now();
        gpii.eventLog.logFilePath = gpiiSettingsDir + "/gpii-" + gpii.journal.formatTimestamp(startupTime) + ".log";
    }
    return gpii.eventLog.logFilePath;
};

/**
 * Writes an event to the log file.
 *
 * @param event {Object} The object.
 */
gpii.eventLog.writeLog = function (event) {

    fluid.log(event);

    if (!gpii.eventLog.logFilePath) {
        gpii.eventLog.logFilePath = gpii.eventLog.getLogFilePath();
    }

    event.time = new Date().toISOString();
    fs.appendFileSync(gpii.eventLog.logFilePath, JSON.stringify(event) + "\n");

};

/**
 * Starts a timer.
 *
 * @param timerId [optional] Something to identify the timer.
 * @return {*|number} The timer id.
 */
gpii.eventLog.startTimer = function (timerId) {
    var now = Date.now();
    timerId = timerId || now;
    gpii.eventLog.timers[timerId] = now;
    return timerId;
};

/**
 * Stops a timer (ie, removes it), and returns the time in milliseconds since it started.
 *
 * @param id {String|Number} The timer id, or start time.
 * @return {Number} Number of milliseconds since the start of the timer.
 */
gpii.eventLog.stopTimer = function (id) {
    var now = Date.now();
    var startTime;
    if (gpii.eventLog.timers.hasOwnProperty(id)) {
        startTime = gpii.eventLog.timers[id];
        delete gpii.eventLog.timers[id];
    } else if (typeof(id) === "number") {
        startTime = id;
    }

    var timespan;
    if (startTime) {
        timespan = now - startTime;
    } else {
        timespan = 0;
    }

    return timespan;
};

/**
 * Determines if an object is empty (it has no properties of its own)
 *
 * @param obj The object to check.
 * @return {boolean} true for {}, null, or undefined.
 */
gpii.eventLog.isEmpty = function (obj) {
    var isEmpty = true;
    if (obj) {
        for (var name in obj) {
            if (obj.hasOwnProperty(name)) {
                isEmpty = false;
                break;
            }
        }
    } else {
        isEmpty = obj === null || obj === undefined;
    }
    return isEmpty;
};

/**
 * Ensures a value is an object. If it's not an object, return an object containing it.
 * Null, empty object, or undefined returns null.
 *
 * @param data The value to work with.
 * @return {object} The given object, or new object with a field "value" set to data
 */
gpii.eventLog.wrapData = function (data) {
    var dataTogo;

    if (data === null || data === undefined) {
        dataTogo = null;
    } else if (fluid.isPlainObject(data, true)) {
        if (gpii.eventLog.isEmpty(data)) {
            dataTogo = null;
        } else {
            dataTogo = data;
        }
    } else {
        dataTogo = {value: data};
    }

    return dataTogo;
};


fluid.defaults("gpii.eventLog.log", {
    gradeNames: "fluid.function"
});



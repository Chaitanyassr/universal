/* Tests for the remote file settings handler.
 *
 * Copyright 2019 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    path = require("path"),
    fs = require("fs"),
    gpii = fluid.registerNamespace("gpii"),
    jqUnit = fluid.registerNamespace("jqUnit"),
    kettle = require("kettle");

fluid.require("%gpii-universal/gpii/node_modules/journal/src/SettingsDir.js");
fluid.registerNamespace("gpii.tests.remoteFileSettingsHandler");

kettle.loadTestingSupport();

require("settingsHandlers");

fluid.defaults("gpii.tests.remoteFileSettingsHandler", {
    gradeNames: ["fluid.test.testEnvironment"],

    components: {
        server: {
            type: "gpii.tests.remoteFileSettingsHandler.server"
        },
        tester: {
            type: "gpii.tests.remoteFileSettingsHandler.testCaseHolder"
        }
    }
});

fluid.defaults("gpii.tests.remoteFileSettingsHandler.server", {
    gradeNames: ["kettle.server"],
    port: 28531,
    components: {
        app: {
            type: "kettle.app",
            options: {
                requestHandlers: {
                    main: {
                        type: "gpii.tests.remoteFileSettingsHandler.requestHandler",
                        route: "/:file",
                        method: "get"
                    }
                }
            }
        }
    }
});

fluid.defaults("gpii.tests.remoteFileSettingsHandler.requestHandler", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            funcName: "gpii.tests.remoteFileSettingsHandler.handleRequest",
            args: [ "{that}", "{that}.req.params.file" ]
        }
    }
});

gpii.tests.remoteFileSettingsHandler.handleRequest = function (request, file) {
    try {
        var string = fs.readFileSync(path.join(__dirname, file), "utf8");
        request.events.onSuccess.fire(string);
    } catch (e) {
        request.events.onError.fire({
            message: "Not found",
            statusCode: 404
        });
    }
};

fluid.defaults("gpii.tests.remoteFileSettingsHandler.testCaseHolder", {
    gradeNames: ["fluid.test.testCaseHolder"],
    modules: [{
        name: "remoteFileSettingsHandler download",
        tests: [{
            // First download ensures it's downloaded.
            name: "remoteFileSettingsHandler.downloadFile (initial)",
            expect: 2,

            task: "gpii.settingsHandlers.remoteFileSettingsHandler.downloadFile",
            args: ["http://localhost:28531/" + path.basename(__filename)],

            resolve: "gpii.tests.remoteFileSettingsHandler.checkDownload",
            resolveArgs: [__filename, "{arguments}.0", false]
        }, {
            // Download again to test overwriting the existing.
            name: "remoteFileSettingsHandler.downloadFile (overwrite)",
            expect: 2,

            task: "gpii.settingsHandlers.remoteFileSettingsHandler.downloadFile",
            args: ["http://localhost:28531/" + path.basename(__filename)],

            resolve: "gpii.tests.remoteFileSettingsHandler.checkDownload",
            resolveArgs: [__filename, "{arguments}.0", true]
        }, {
            // The download was deleted in the previous test to check downloading a non-existing file.
            name: "remoteFileSettingsHandler.downloadFile (new)",
            expect: 2,

            task: "gpii.settingsHandlers.remoteFileSettingsHandler.downloadFile",
            args: ["http://localhost:28531/" + path.basename(__filename)],

            resolve: "gpii.tests.remoteFileSettingsHandler.checkDownload",
            resolveArgs: [__filename, "{arguments}.0", true]
        }]
    }, {
        name: "remoteFileSettingsHandler apply file",
        tests: [{
            name: "remoteFileSettingsHandler apply file (replace existing)",
            expect: 2,

            task: "gpii.settingsHandlers.remoteFileSettingsHandler.applyFile",
            args: [""],

            resolve: "gpii.tests.remoteFileSettingsHandler.checkDownload",
            resolveArgs: [__filename, "{arguments}.0", false]
        }]
    }]
});

gpii.tests.remoteFileSettingsHandler.checkDownload = function (origFile, downloadedFile, deleteDownload) {
    // Sanity check
    jqUnit.assertNotEquals("The downloaded file and original file should be different file names",
        origFile, downloadedFile);

    var origContent = fs.readFileSync(origFile, "utf8");
    var downloadContent = fs.readFileSync(downloadedFile, "utf8");

    jqUnit.assertEquals("Downloaded content should match the original", origContent, downloadContent);

    if (deleteDownload) {
        fs.unlinkSync(downloadedFile);
    }
};

gpii.tests.remoteFileSettingsHandler.applyFileTest = function () {

    // var tests = {
    //     "Destination exists, keep the source.": {
    //         testInput: {
    //             destFile: "original file",
    //             sourceFile: "new file",
    //             keepSource: true
    //         },
    //         expectFiles: {
    //             destFile: "new file",
    //             sourceFile: "new file",
    //             resolveFile: "original file"
    //         }
    //     },
    //     "Destination exists, remove the source.": {
    //         testInput: {
    //             destFile: "original file",
    //             sourceFile: "new file",
    //             keepSource: false
    //         },
    //         expectFiles: {
    //             destFile: "new file",
    //             sourceFile: null,
    //             resolveFile: "original file"
    //         }
    //     },
    //     "Destination does not exist, keep the source.": {
    //         testInput: {
    //             destFile: null,
    //             sourceFile: "new file",
    //             keepSource: true
    //         },
    //         expectFiles: {
    //             destFile: "new file",
    //             sourceFile: "new file",
    //             resolveFile: null
    //         }
    //     },
    //     "Destination does not exist, remove the source.": {
    //         testInput: {
    //             destFile: null,
    //             sourceFile: "new file",
    //             keepSource: true
    //         },
    //         expectFiles: {
    //             destFile: "new file",
    //             sourceFile: null,
    //             resolveFile: null
    //         }
    //     }
    // };

    // var testWork = fluid.transform(tests, function (test, testName) {
    //     return function () {
    //         var promise = fluid.promise();
    //         var testDir = path.join(os.tmpdir(), "/gpii-rfs-test" + Math.random());
    //         fs.mkdirSync(testDir);
    //
    //         var source, dest;
    //         if (test.testInput.sourceFile) {
    //             source = path.join(testDir, "source");
    //         }
    //         if (test.testInput.destFile) {
    //             dest = path.join(testDir, "dest");
    //         }
    //
    //
    //
    //         //remoteFileSettingsHandler.applyFile
    //
    //         return promise;
    //     };
    // });

};


module.exports = kettle.test.bootstrap("gpii.tests.remoteFileSettingsHandler");

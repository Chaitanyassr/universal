/*
 * GPII JSON Settings Handler
 *
 * Copyright 2017 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

fluid.registerNamespace("gpii.launchHandlers");
fluid.registerNamespace("gpii.launchHandlers.flexibleHandler");


gpii.launchHandlers.flexibleHandler.set = function (payload) {
    return fluid.transform(payload, function (allSettingsBlocks, solutionId) {
        return fluid.transform(allSettingsBlocks, function (handlerData) {
            // find desire state { running: X }
            var desiredState = handlerData.settings.running;
            if (desiredState !== true && desiredState !== false) {
                fluid.fail("Unable to set the launch state of ", solutionId, " to ", desiredState);
            }

            // get current state
            var currentState = gpii.launchHandlers.flexibleHandler.executeIsRunningBlock(handlerData.options, solutionId);

            // if not in desired state
            if  (currentState !== desiredState) {
                desiredState === true ?
                    gpii.launchHandlers.flexibleHandler.executeStartBlock(handlerData) :
                    gpii.launchHandlers.flexibleHandler.executeStopBlock(handlerData);
            }

            return gpii.settingsHandlers.setSettings(handlerData, { running: currentState });
        });
    });
};

gpii.launchHandlers.flexibleHandler.get = function (payload) {
    return fluid.transform(payload, function (allSettingsBlocks, solutionId) {
        return fluid.transform(allSettingsBlocks, function (handlerData) {
            var currentState = gpii.launchHandlers.flexibleHandler.executeIsRunningBlock(handlerData.options, solutionId);
            return { settings: { running: currentState }};
        });
    });
};

gpii.launchHandlers.flexibleHandler.executeStartBlock = function (mainEntry) {
    var startBlock = fluid.get(mainEntry, [ "options", "start" ]);
    fluid.invokeGradedFunction(startBlock.type, startBlock);
};

gpii.launchHandlers.flexibleHandler.executeStopBlock = function (mainEntry) {
    var stopBlock = fluid.get(mainEntry, [ "options", "stop" ]);
    fluid.invokeGradedFunction(stopBlock.type, stopBlock);
};

gpii.launchHandlers.flexibleHandler.executeIsRunningBlock = function (options) {
    return gpii.processReporter.live.handleIsRunning(options);
};

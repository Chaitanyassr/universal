/**
 * GPII PCP Channel Tests
 *
 * Copyright 2017 Raising the Floor - International
 *
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    jqUnit = fluid.require("node-jqunit", require, "jqUnit"),
    gpii = fluid.registerNamespace("gpii"),
    kettle = fluid.registerNamespace("kettle");

fluid.require("%universal");

gpii.loadTestingSupport();

fluid.registerNamespace("gpii.tests.flowManager.pcpChannel");

gpii.tests.flowManager.pcpChannel.payloads = {
    "connectWithNoUsers": {
        "path": [],
        "type": "ADD"
    },
    "logoutUser": {
        "path": [],
        "value": null,
        "type": "DELETE"
    },
    "snapset_1a_loggedIn": {
        "path": [],
        "type": "ADD",
        "value": {
            "userToken": "snapset_1a",
            "activeContextName": "gpii-default",
            "settingControls": {
                "http://registry\\.gpii\\.net/common/DPIScale": {
                    "value": 1.25,
                    "schema": {
                        "title": "DPI Scale",
                        "description": "DPI scale factor on default monitor",
                        "type": "number",
                        "min": 1,
                        "max": 2,
                        "divisibleBy": 0.25
                    }
                },
                "http://registry\\.gpii\\.net/common/cursorSize": {
                    "value": 1,
                    "schema": {
                        "title": "Cursor Size",
                        "description": "Cursor size",
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "divisibleBy": 0.1
                    }
                }
            },
            "preferences": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences"
                    }
                }
            }
        }
    },
    "snapset_2c_loggedIn": {
        "path": [],
        "type": "ADD",
        "value": {
            "userToken": "snapset_2c",
            "activeContextName": "gpii-default",
            "settingControls": {
                "http://registry\\.gpii\\.net/common/cursorSize": {
                    "value": 1,
                    "schema": {
                        "title": "Cursor Size",
                        "description": "Cursor size",
                        "type": "number",
                        "min": 0,
                        "max": 1,
                        "divisibleBy": 0.1
                    }
                },
                "http://registry\\.gpii\\.net/common/DPIScale": {
                    "value": 1.75,
                    "schema": {
                        "title": "DPI Scale",
                        "description": "DPI scale factor on default monitor",
                        "type": "number",
                        "min": 1,
                        "max": 2,
                        "divisibleBy": 0.25
                    }
                },
                "http://registry\\.gpii\\.net/applications/com\\.microsoft\\.windows\\.highContrast.http://registry\\.gpii\\.net/common/highContrastEnabled": {
                    "value": true,
                    "schema": {
                        "title": "High Contrast",
                        "description": "Whether to enable/disable High Contrast",
                        "type": "boolean"
                    },
                    "solutionName": "Windows High Contrast"
                },
                "http://registry\\.gpii\\.net/applications/com\\.microsoft\\.windows\\.highContrast.http://registry\\.gpii\\.net/common/highContrastTheme": {
                    "value": "white-black",
                    "schema": {
                        "title": "High Contrast theme",
                        "description": "High Contrast Theme",
                        "type": "string",
                        "enum": [
                            "black-white",
                            "white-black",
                            "yellow-black",
                            "black-yellow"
                        ]
                    },
                    "solutionName": "Windows High Contrast"
                },
                "http://registry\\.gpii\\.net/applications/net\\.gpii\\.uioPlus.http://registry\\.gpii\\.net/common/highContrastEnabled": {
                    "value": true,
                    "schema": {
                        "title": "High Contrast",
                        "description": "Whether to enable/disable High Contrast",
                        "type": "boolean"
                    },
                    "solutionName": "UIO+ Browser Extension"
                },
                "http://registry\\.gpii\\.net/applications/net\\.gpii\\.uioPlus.http://registry\\.gpii\\.net/common/highContrastTheme": {
                    "value": "white-black",
                    "schema": {
                        "title": "High Contrast theme",
                        "description": "High Contrast Theme",
                        "type": "string",
                        "enum": [
                            "black-white",
                            "white-black",
                            "yellow-black",
                            "black-yellow"
                        ]
                    },
                    "solutionName": "UIO+ Browser Extension"
                }
            },
            "preferences": {
                "contexts": {
                    "gpii-default": {
                        "name": "Default preferences"
                    }
                }
            }
        }
    }
};

gpii.tests.flowManager.pcpChannel.reportPlatform = function () {
    return {
        id: "win32",
        version: "x86-64"
    };
};

gpii.tests.flowManager.pcpChannel.connectionSucceeded = function (data) {
    console.log("## connectionSucceeded ");
    jqUnit.assertTrue("Connection between client and server can be established",
        data
    );
};

gpii.tests.flowManager.pcpChannel.checkPayload = function (data, expected) {
    jqUnit.assertDeepEq("Check message is as expected", gpii.tests.flowManager.pcpChannel.payloads[expected], data);
};

fluid.defaults("gpii.tests.flowManager.pcpChannel.clientHolder", {
    gradeNames: "kettle.test.request.ws",
    path: "/pcpChannel",
    port: "{configuration}.options.mainServerPort",
    events: {
        connectionSucceeded: null
    },
    listeners: {
        connectionSucceeded: {
            funcName: "gpii.tests.flowManager.pcpChannel.connectionSucceeded",
            args: ["{arguments}.0"]
        }
    }
});


fluid.defaults("gpii.tests.flowManager.pcpChannel.clientOne", {
    gradeNames: "gpii.tests.flowManager.pcpChannel.clientHolder"
});

fluid.defaults("gpii.tests.flowManager.pcpChannel.tokenRequest", {
    gradeNames: "kettle.test.request.http",
    termMap: {
        userToken: "{that}.options.tokenName"
    }
});

fluid.defaults("gpii.tests.flowManager.pcpChannel.loginRequest", {
    gradeNames: "gpii.tests.flowManager.pcpChannel.tokenRequest",
    path: "/user/%userToken/login"
});

fluid.defaults("gpii.tests.flowManager.pcpChannel.logoutRequest", {
    gradeNames: "gpii.tests.flowManager.pcpChannel.tokenRequest",
    path: "/user/%userToken/logout"
});

gpii.tests.flowManager.pcpChannel.testDefs = [{
    name: "PCP Channel - Basic user login/logout and client connect/disconnect tests",
    expect: 7,
    config: {
        configName: "gpii.config.development.all.local.mock.windows",
        configPath: "%universal/gpii/configs/mocks"
    },
    components: {
        clientOne: {
            type: "gpii.tests.flowManager.pcpChannel.clientOne"
        },
        clientTwo: {
            type: "gpii.tests.flowManager.pcpChannel.clientOne"
        },
        loginUser1a: {
            type: "gpii.tests.flowManager.pcpChannel.loginRequest",
            options: {
                tokenName: "snapset_1a"
            }
        },
        loginUser2c: {
            type: "gpii.tests.flowManager.pcpChannel.loginRequest",
            options: {
                tokenName: "snapset_2c"
            }
        },
        logoutUser1a: {
            type: "gpii.tests.flowManager.pcpChannel.logoutRequest",
            options: {
                tokenName: "snapset_1a"
            }
        }
    },
    sequence: [{
        func: "{clientOne}.connect"
    }, {
        event: "{clientOne}.events.onConnect",
        listener: "gpii.tests.flowManager.pcpChannel.connectionSucceeded"
    }, {
        event: "{clientOne}.events.onReceiveMessage",
        listener: "gpii.tests.flowManager.pcpChannel.checkPayload",
        args: ["{arguments}.0", "connectWithNoUsers"]
    }, {
        func: "{loginUser1a}.send"
    }, {
        event: "{clientOne}.events.onReceiveMessage",
        listener: "gpii.tests.flowManager.pcpChannel.checkPayload",
        args: ["{arguments}.0", "snapset_1a_loggedIn"]
    }, {
        func: "{clientOne}.disconnect"
    }, {
        func: "{clientTwo}.connect"
    }, {
        event: "{clientTwo}.events.onConnect",
        listener: "gpii.tests.flowManager.pcpChannel.connectionSucceeded"
    }, {
        event: "{clientTwo}.events.onReceiveMessage",
        listener: "gpii.tests.flowManager.pcpChannel.checkPayload",
        args: ["{arguments}.0", "snapset_1a_loggedIn"]
    }, {
        func: "{logoutUser1a}.send"
    }, {
        event: "{clientTwo}.events.onReceiveMessage",
        listener: "gpii.tests.flowManager.pcpChannel.checkPayload",
        args: ["{arguments}.0", "logoutUser"]
    }, {
        func: "{loginUser2c}.send"
    },  {
        event: "{clientTwo}.events.onReceiveMessage",
        listener: "gpii.tests.flowManager.pcpChannel.checkPayload",
        args: ["{arguments}.0", "snapset_2c_loggedIn"]
    }]
}];

kettle.test.bootstrapServer(fluid.copy(gpii.tests.flowManager.pcpChannel.testDefs));

/**
 * GPII Flow Manager Privacy Filtering Tests
 *
 * Copyright 2015 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

/* global jqUnit, jQuery */

"use strict";

var fluid = fluid || require("infusion");

(function ($) {

    var gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.tests.flowManager.privacy.testdata");

    gpii.tests.flowManager.privacy.testdata.payload = $.ajax({
        type: "GET",
        url: "../data/matchmaker.output.payload.json",
        async: false,
        dataType: "json"
    }).responseJSON;

    gpii.tests.flowManager.privacy.testdata.selectedPreferencesMap = {
        "org.gnome.desktop.a11y.magnifier": {
            "increase-size.magnifier": true
        }
    };

    gpii.tests.flowManager.privacy.reverseTransform = $.ajax({
        type: "GET",
        url: "../../../../../testData/ontologies/privacy-flat.json",
        async: false,
        dataType: "json"
    }).responseJSON;

    gpii.tests.flowManager.privacy.forwardTransform = fluid.model.transform.invertConfiguration(gpii.tests.flowManager.privacy.reverseTransform);

    fluid.defaults("gpii.tests.flowManager.privacy.privacyFilter", {
        gradeNames: ["gpii.flowManager.privacy.privacyFilter", "autoInit"],
        members: {
            forwardTransform: gpii.tests.flowManager.privacy.forwardTransform,
            reverseTransform: gpii.tests.flowManager.privacy.reverseTransform
        }
    });

    gpii.tests.flowManager.privacy.runTests = function () {
        jqUnit.test("Filtering matchMakerOutput leaves other sections as is", function () {
            var privacyFilter = gpii.tests.flowManager.privacy.privacyFilter();
            jqUnit.expect(2);
            var filteredPayload = privacyFilter.filter(gpii.tests.flowManager.privacy.testdata.payload, gpii.tests.flowManager.privacy.testdata.selectedPreferencesMap);
            jqUnit.assertValue("activeContexts has a value", filteredPayload.activeContexts);
            jqUnit.assertEquals("activeContexts is as before", gpii.tests.flowManager.privacy.testdata.payload.activeContexts, filteredPayload.activeContexts);
        });
    };

}(jQuery));

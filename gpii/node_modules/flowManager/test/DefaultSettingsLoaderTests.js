/*!
Default Settings Loader Tests

Copyright 2018 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii"),
    kettle = require("kettle"),
    jqUnit = fluid.registerNamespace("jqUnit"),
    JSON5 = require("json5"),
    fs = require("fs"),
    rimraf = require("rimraf");;

kettle.loadTestingSupport();

require("journal");
fluid.require("%flowManager/src/DefaultSettingsLoader.js");

fluid.defaults("gpii.tests.defaultSettingsLoader", {
    gradeNames: ["gpii.defaultSettingsLoader"],
    members: {
        // Use a temp dir to not disturb the data in the real GPII settings dir
        gpiiSettingsDir: "%flowManager/test/data/temp"
    },
    listeners: {
        "onCreate.createTempDir": {
            listener: "gpii.tests.defaultSettingsLoader.createTempDir",
            args: ["{that}.gpiiSettingsDir"],
            priority: "before:prepareSettingsFile"
        },
        "onDestroy.removeTempDir": {
            listener: "gpii.tests.defaultSettingsLoader.removeTempDir",
            args: ["{that}.gpiiSettingsDir"]
        }
    }
});

gpii.tests.defaultSettingsLoader.createTempDir = function (gpiiSettingsDir) {
    var fullDir = fluid.module.resolvePath(gpiiSettingsDir);
    if (!fs.existsSync(fullDir)) {
        fs.mkdirSync(fullDir);
    }
};

gpii.tests.defaultSettingsLoader.removeTempDir = function (gpiiSettingsDir) {
    var fullDir = fluid.module.resolvePath(gpiiSettingsDir);
    rimraf(fullDir, function () {
        fluid.log("Cleanup: removed ", fullDir);
    });
};

gpii.tests.defaultSettingsLoader.withInitialCopy = function (defaultSettingsLoader) {
    var expected = JSON5.parse(fs.readFileSync(fluid.module.resolvePath(defaultSettingsLoader.options.defaultSettingsInCodeBase), "utf-8"));
    var result = defaultSettingsLoader.get();

    jqUnit.assertTrue("The settings file has been copied to the settings dir", fs.existsSync(defaultSettingsLoader.defaultSettingsFile));
    jqUnit.assertDeepEq("get() returns the expected settings", expected, result);
};

gpii.tests.defaultSettingsLoader.withoutInitialCopy = function (defaultSettingsLoader) {
    // Prepare the test by writing a initial settings file to the settings dir
    var initialSettings = {
        "initial": "value"
    };

    fs.writeFileSync(defaultSettingsLoader.defaultSettingsFile, JSON.stringify(initialSettings));

    var settingsFromCodeBase = JSON5.parse(fs.readFileSync(fluid.module.resolvePath(defaultSettingsLoader.options.defaultSettingsInCodeBase), "utf-8"));
    var result = defaultSettingsLoader.get();

    jqUnit.assertDeepNeq("The loaded settings is as expected", JSON.stringify(initialSettings), result);
    jqUnit.assertDeepNeq("The expected settings is different from default settings in the code base", settingsFromCodeBase, result);
};

fluid.defaults("gpii.tests.defaultSettingsLoader.testCaseHolder", {
    gradeNames: ["fluid.test.testCaseHolder"],
    components: {
        defaultSettingsLoader: {
            type: "gpii.tests.defaultSettingsLoader"
        }
    },
    modules: [{
        name: "gpii.defaultSettingsLoader Tests",
        tests: [{
            expect: 2,
            name: "Tests when the settings file is not initially copied to the settings dir",
            func: "gpii.tests.defaultSettingsLoader.withInitialCopy",
            args: ["{defaultSettingsLoader}"]
        }, {
            expect: 2,
            name: "Test the settings file in the settings dir will not be overwritten when it's already there",
            func: "gpii.tests.defaultSettingsLoader.withoutInitialCopy",
            args: ["{defaultSettingsLoader}"]
        }]
    }]
});

fluid.defaults("gpii.tests.defaultSettingsLoader.testEnvironment", {
    gradeNames: ["fluid.test.testEnvironment"],
    components: {
        tester: {
            type: "gpii.tests.defaultSettingsLoader.testCaseHolder"
        }
    }
});

module.exports = kettle.test.bootstrap("gpii.tests.defaultSettingsLoader.testEnvironment");

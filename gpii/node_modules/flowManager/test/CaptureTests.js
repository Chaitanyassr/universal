/**
 * GPII Untrusted Settings Data Source Tests
 *
 * Copyright 2019 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

var jqUnit = require("node-jqunit");

fluid.require("%gpii-universal");
gpii.loadTestingSupport();

fluid.registerNamespace("gpii.tests.flowManager.capture");

gpii.tests.flowManager.capture.testDefs = [{
    name: "My first capture test",
    config: {
        configName: "gpii.config.development.local",
        configPath: "%gpii-universal/gpii/configs/shared"
    },
    sequence: [{
        task: "gpii.tests.flowManager.capture.systemSettingsPromise",
        args: ["{gpii.flowManager.capture}"],
        resolve: "jqUnit.assertDeepEq",
        // TODO Create a few tests with configs that include existing settings, for mock
        // installed solutions to test this more realistically.
        resolveArgs: ["The current capture on these configs is empty", [], "{arguments}.0"]
    }]
}];

gpii.tests.flowManager.capture.systemSettingsPromise = function(capture) {
    // TODO: figure out the proper way to inject the capture component in to these tests.
    // The injected copy is undefined, I *think* because it's being wired up between test runs,
    // and the tree is torn down and up between each test...
    capture = fluid.queryIoCSelector(fluid.rootComponent, "gpii.flowManager.capture")[0];
    return capture.getSystemSettingsCapture();
};

gpii.test.runCouchTestDefs(gpii.tests.flowManager.capture.testDefs);

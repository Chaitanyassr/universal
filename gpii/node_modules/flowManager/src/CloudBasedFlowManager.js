/**
 * GPII Cloud-Based FlowManager
 *
 * Copyright 2013 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

require("gpii-oauth2");
require("./PrivacyFilter.js");

/** BASE, UNSECURED CLOUD-BASED FLOW MANAGER -
 * This will be maintained for a while in parallel with the OAuth2-secured API and eventually deprecated
 * This exposes an unsecured HTTP GET API of the form /:userToken/settings/:device
 */

fluid.defaults("gpii.flowManager.cloudBased", {
    gradeNames: ["autoInit", "fluid.littleComponent"],
    components: {
        deviceReporterDataSource: {
            type: "fluid.emptySubcomponent"
        }
    },
    urls: {
        deviceReporter: ""
    },
    handlers: {
        settings: {
            route: "/:userToken/settings/:device",
            type: "get"
        },
        userLogin: null,
        userLogout: null,
        getUserToken: null,
        // TODO Should this go into the gpii.flowManager.cloudBased.oauth2
        // grade where we already have a dataStore?
        untrustedSettings: {
            route: "/:userToken/untrusted-settings/:device",
            type: "get"
        }
    }
});

// unsecured endpoint - will be removed in time
gpii.request.flowManager.onSettings = function (onError, userToken, handler, deviceString) {
    var deviceContext;
    try {
        deviceContext = JSON.parse(deviceString);
    } catch (ex) { // TODO: add proper parse fail feedback using jsonlint scheme to appear in Kettle with KETTLE-31
        onError.fire({
            isError: true,
            message: "Cloud based flow manager requires device information - failed to parse " + deviceString
        });
        return;
    }
    handler.events.onUserToken.fire(userToken);
    handler.events.onDeviceContext.fire(deviceContext);
};

gpii.flowManager.cloudBased.matchToSettings = function (finalPayload, event) {
    var lifecycleInstructions = finalPayload.lifecycleInstructions;
    var settings = {};
    fluid.each(lifecycleInstructions, function processSolution(solution, solutionId) {
        fluid.each(solution.settingsHandlers, function (settingsHandler) {
            if (settingsHandler.settings) {
                settings[solutionId] = settingsHandler.settings;
            }
        });
    });
    event.fire(settings);
};

// TODO: This component is in an absurd namespace
fluid.defaults("kettle.requests.request.handler.settings", {
    gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.matchMakingRequest", "autoInit"],
    invokers: {
        handle: {
            funcName: "gpii.request.flowManager.onSettings",
            args: ["{requestProxy}.events.onError", "{request}.req.params.userToken", "{that}", "{request}.req.params.device"],
            dynamic: true
        },
        matchToSettings: {
            funcName: "gpii.flowManager.cloudBased.matchToSettings",
            args: ["{arguments}.0", "{requestProxy}.events.onSuccess"]
        }
    },
    listeners: {
        onMatchDone: "{that}.matchToSettings"
    }
});

// TODO Privacy filtering on the untrusted settings response
// Add a processMatch listener and re-use
// gpii.flowManager.cloudBased.privacy.filter
// Will need access to the authorizations from the OAuth2 dataStore

gpii.flowManager.cloudBased.matchToUntrustedSettings = function (finalPayload, event) {
    var settings = fluid.filterKeys(finalPayload, [
        "userToken", "lifecycleInstructions", "activeContextName",
        "activeConfiguration", "solutionsRegistryEntries", "matchMakerOutput"
    ]);
    event.fire(settings);
};

fluid.defaults("kettle.requests.request.handler.untrustedSettings", {
    gradeNames: ["fluid.littleComponent", "gpii.request.flowManager.matchMakingRequest", "autoInit"],
    invokers: {
        handle: {
            funcName: "gpii.request.flowManager.onSettings",
            args: ["{requestProxy}.events.onError", "{request}.req.params.userToken", "{that}", "{request}.req.params.device"],
            dynamic: true
        },
        matchToUntrustedSettings: {
            funcName: "gpii.flowManager.cloudBased.matchToUntrustedSettings",
            args: ["{arguments}.0", "{requestProxy}.events.onSuccess"]
        }
    },
    listeners: {
        onMatchDone: "{that}.matchToUntrustedSettings",
        processMatch: { // Contribute our filter into the middle of the chain
            priority: gpii.request.flowManager.processMatch.priorities.privacyFilter,
            namespace: "privacyFilter",
            funcName: "gpii.flowManager.cloudBased.privacy.filter",
            args: ["{arguments}.0", { "increase-size.magnifier": true } ] // TODO selectedPreferences
        }
    }
});

/** BEGIN OAUTH2-SECURED CLOUD-BASED FLOW MANAGER */

fluid.defaults("gpii.flowManager.cloudBased.oauth2", {
    gradeNames: ["fluid.littleComponent", "autoInit"],
    components: {
        oauth2DataStore: {
        // TODO: We will not have implemented a signup UI and persistence for a while. For current demonstrations, we will need
        // to seed the implementation here with material similar to that which appears at
        // gpii-oauth2-datastore/src/DataStoreWithSampleData.js in order to prepopulate the system with a usable collection of
        // OAuth2 client services and users.
            type: "gpii.oauth2.inMemoryDataStore"
        },
        authServer: {
        // note that this subcomponent directly attaches express routes to our underlying express app via its direct API -
        // e.g. at the paths /login, /authorize as well as mounting infusion at /infusion and the entire privacy UI at /privacy
            type: "gpii.oauth2.authServer",
            options: {
                components: {
                    dataStore: "{gpii.oauth2.dataStore}"
                },
                members: {
                    expressApp: "{kettle.server}.expressApp"
                },
                events: {
                    onContributeMiddleware: "{kettle.server}.events.onContributeMiddleware",
                    onContributeRouteHandlers: "{kettle.server}.events.onContributeRouteHandlers"
                }
            }
        },
        deviceReporterDataSource: {
            type: "fluid.emptySubcomponent"
        }
    },
    urls: {
        deviceReporter: ""
    },
    handlers: {
        oauth2Settings: {
            route: "/settings",
            type: "get"
        },
        userLogin: null,
        userLogout: null,
        getUserToken: null
    }
});

fluid.registerNamespace("gpii.flowManager.cloudBased.privacy");

// TODO: Restore the ability of the ontology manager to straightforwardly form single transforms and remove this hard-coded path

gpii.flowManager.cloudBased.privacy.reverseTransform = fluid.require("${universal}/testData/ontologies/privacy-flat.json");
gpii.flowManager.cloudBased.privacy.forwardTransform = fluid.model.transform.invertConfiguration(gpii.flowManager.cloudBased.privacy.reverseTransform);

// TODO don't need to provide both forwardTransform and reverseTransform
// As the forward is derived from the reverse

// TODO: This component is in an absurd namespace
fluid.defaults("kettle.requests.request.handler.oauth2Settings", {
    gradeNames: ["fluid.littleComponent", "kettle.requests.request.handler.settings", "autoInit"],
    components: {
        privacyFilter: {
            type: "gpii.flowManager.privacy.privacyFilter",
            options: {
                members: {
                    forwardTransform: gpii.flowManager.cloudBased.privacy.forwardTransform,
                    reverseTransform: gpii.flowManager.cloudBased.privacy.reverseTransform
                }
            }
        }
    },
    invokers: {
        handle: {
            funcName: "gpii.request.flowManager.onOauth2Settings",
            args: ["{request}", "{that}", "{gpii.flowManager.cloudBased.oauth2}.oauth2DataStore"],
            dynamic: true
        }
    },
    listeners: {
        processMatch: { // Contribute our filter into the middle of the chain
            priority: gpii.request.flowManager.processMatch.priorities.privacyFilter,
            namespace: "privacyFilter",
            listener: "{privacyFilter}.filter",
            args: [
                "{arguments}.0",
                "{request}.selectedPreferencesMap"
            ]
        }
    }
});

gpii.oauth2.sendUnauthorized = function (request) {
    request.events.onError.fire({
            isError: true,
            message: "Unauthorized",
            statusCode: 401
        });
};

gpii.flowManager.cloudBased.solutionToDeviceContext = function (solutionId) {
    return {
        OS: {
            id: "web"
        },
        solutions: [ {
            id: solutionId
        }]
    };
};

gpii.request.flowManager.onOauth2Settings = function (request, handler, dataStore) {
    var accessToken = gpii.oauth2.parseBearerAuthorizationHeader(request.req);
    if (!accessToken) {
        gpii.oauth2.sendUnauthorized(request);
    } else {
        var auth = dataStore.findAuthByAccessToken(accessToken);
        if (!auth) {
            gpii.oauth2.sendUnauthorized(request);
        } else {
            fluid.log("Got AUTH DECISION: " + JSON.stringify(auth, null, 2));
            request.selectedPreferencesMap = {};
            request.selectedPreferencesMap[auth.oauth2ClientId] = auth.selectedPreferences;
            handler.events.onUserToken.fire(auth.userGpiiToken);
            handler.events.onDeviceContext.fire(gpii.flowManager.cloudBased.solutionToDeviceContext(auth.oauth2ClientId));
        }
    }
};

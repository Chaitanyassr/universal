(function () {

    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.flowManager");

    fluid.defaults("gpii.flowManager.browserChannel", {
        gradeNames: ["fluid.modelComponent"]
    });

    fluid.defaults("gpii.flowManager.browserChannel.handler", {
        gradeNames: ["kettle.request.ws", "gpii.flowManager.sessionAware"],
        invokers: {
            handleRequest: {
                funcName: "gpii.flowManager.browserChannel.handleRequest",
                args: ["{request}",
                       "{flowManager}.solutionsRegistryDataSource",
                       "{deviceReporter}.platformReporter"]
            }
        }
    });

    gpii.flowManager.browserChannel.handleRequest = function (fluidRequest, solutionsRegistryDataSource, platformReporter) {
        solutionsRegistryDataSource.get({os: platformReporter.reportPlatform().id}, function onSuccess(entries) {
            var solutionId = fluidRequest.data;

            if (!(solutionId in entries)) {
                var errMsg = "Rejecting a connection request from '" + solutionId +
                          "'. The solution id was not found in the solutions registry";

                gpii.flowManager.logAndNotify("Lifecycle manager returned: ", fluidRequest.events.onError)(errMsg);
            } else {
                gpii.settingsHandlers.webSockets.addClient(solutionId, fluidRequest.socket);

                var okMsg = "A request to browserChannel has been successfully processed";
                gpii.flowManager.logAndNotify("Lifecycle manager returned: ", fluidRequest.events.onSuccess)(okMsg);
            }
        });
    };

})();

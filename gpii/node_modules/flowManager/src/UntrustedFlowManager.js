/**
 * GPII Untrusted local FlowManager
 *
 * Copyright 2015 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion");
var gpii = fluid.registerNamespace("gpii");

// TODO For now, follow the approach of the cloudBased Flow Manager of
// extending flowManager and disabling/overriding pieces. In the
// future, refactor flowManager so that the base is smaller and use
// composition rather than overriding.

fluid.defaults("gpii.flowManager.untrusted", {
    gradeNames: ["fluid.littleComponent", "autoInit"],
    components: {
        settingsDataSource: {
            type: "kettle.dataSource.URL",
            options: {
                url: "{gpii.flowManager}.options.urls.settings"
            }
        }
    },
    handlers: {
        userLogin: null,
        getUserToken: null,
        untrustedUserLogin: {
            route: "/user/:userToken/login",
            type: "get"
        }
    }
});

fluid.registerNamespace("gpii.request.flowManager.untrusted");

gpii.request.flowManager.untrusted.onUserLogin = function (handler, userToken) {
    fluid.log("Untrusted Flow Manager: Login request for user " + userToken);
    handler.events.onUserToken.fire(userToken);
};

gpii.request.flowManager.getSettings = function (settingsDataSource, event) {
    settingsDataSource.get(null, gpii.request.flowManager.logAndNotify(
        "Fetched settings: ", event));
};

fluid.defaults("kettle.requests.request.handler.untrustedUserLogin", {
    gradeNames: ["fluid.littleComponent", "autoInit"],
    invokers: {
        handle: {
            funcName: "gpii.request.flowManager.untrusted.onUserLogin",
            args: ["{that}", "{request}.req.params.userToken"]
        },
        getDeviceContext: {
            funcName: "gpii.request.flowManager.getDeviceContext",
            args: ["{flowManager}.deviceReporterDataSource", "{that}.events.onDeviceContext"]
        },
        "getSettings": {
            funcName: "gpii.request.flowManager.getSettings",
            args: ["{flowManager}.settingsDataSource", "{that}.events.onSettings"]
        },
        startLifecycle: {
            funcName: "gpii.request.flowManager.startLifecycle",
            args: [ "{flowManager}.lifecycleManager", "{arguments}.0", "{requestProxy}.events.onSuccess" ]
                // payload from Cloud-Based Flow Manager
        }
    },
    events: {
        onUserToken: null,
        onDeviceContext: null,
        onSettings: null
    },
    listeners: {
        onUserToken: "{that}.getDeviceContext",
        onDeviceContext: "{that}.getSettings",
        onSettings: "{that}.startLifecycle"
    }
});

/**
 * GPII snapshot Handler
 *
 * Copyright 2014 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */
"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

fluid.defaults("gpii.flowManager.capture", {
    gradeNames: ["fluid.component"],
    events: {
        onPrepareCapture: null,
        onPrepareSolutions: null,
        onSolutions: null,
        onReadyToCapture: {
            events: {
                prepareCapture: "onPrepareCapture",
                prepareSolutions: "onPrepareSolutions",
                solutions: "onSolutions"
            },
            args: [
                "{arguments}.solutions.0",
                "{arguments}.prepareCapture.0"
            ]
        },
        onError: null,

        // Newer versions below using fireTransformEvent
        onSolutionsForCurrentDevice: null,
        onCaptureSettingsForCurrentDevice: null
    },
    listeners: {
        onSolutionsForCurrentDevice: [
            {
                funcName: "gpii.lifecycleManager.getDeviceContextPromise",
                args: ["{flowManager}.deviceReporter"]
            },
            {
                funcName: "gpii.flowManager.getSolutionsPromise",
                args: [ "{flowManager}.solutionsRegistryDataSource", "{arguments}.0"]
            },
            {
                funcName: "fluid.toPromise",
                args: ["{arguments}.0.solutionsRegistryEntries"]
            }
        ],
        onCaptureSettingsForCurrentDevice: [
            {
                funcName: "gpii.lifecycleManager.getDeviceContextPromise",
                args: ["{flowManager}.deviceReporter"]
            },
            {
                funcName: "gpii.flowManager.getSolutionsPromise",
                args: [ "{flowManager}.solutionsRegistryDataSource", "{arguments}.0"]
            },
            {
                funcName: "fluid.toPromise",
                args: ["{arguments}.0.solutionsRegistryEntries"]
            },
            {
                func: "{that}.captureSystemSettingsPromise",
                args: ["{arguments}.0", "{arguments}.1"]
            }
        ],
        "onPrepareCapture.deviceContext": {
            funcName: "gpii.lifecycleManager.getDeviceContext",
            args: ["{flowManager}.deviceReporter", "{that}.events.onPrepareSolutions"]
        },
        onPrepareSolutions: {
            func: "{that}.getSolutions",
            args: ["{arguments}.0"]
        },
        onReadyToCapture: {
            func: "{that}.captureSystemSettings",
            args: ["{arguments}.0", "{arguments}.1"]
        },
        onError: {
            funcName: "console.log",
            args: ["{arguments}.0"]
        }
    },
    invokers: {
        getSolutions: {
            funcName: "gpii.flowManager.getSolutions",
            args: [ "{flowManager}.solutionsRegistryDataSource", "{arguments}.0", "{that}.events.onSolutions", "{that}.events.onError"] //"{request}.events.onError"]
        },
        captureSystemSettings: {
            funcName: "gpii.flowManager.captureSystemSettings",
            args: ["{lifecycleManager}.invokeSettingsHandlerGet", "{lifecycleManager}.variableResolver", "{arguments}.0", "{arguments}.1"]
        },
        getInstalledSolutions: {
            funcName: "gpii.flowManager.getInstalledSolutions",
            args: ["{that}"]
        },
        getSystemSettingsCapture: {
            funcName: "gpii.flowManager.getSystemSettingsCapture",
            args: ["{that}.events.onCaptureSettingsForCurrentDevice", "{arguments}.0"] // Options
        },
        captureSystemSettingsPromise: {
            funcName: "gpii.flowManager.captureSystemSettings",
            args: ["{lifecycleManager}.invokeSettingsHandlerGet", "{lifecycleManager}.variableResolver",
                "{arguments}.0", "{arguments}.1"]
        }
    }
});


gpii.flowManager.getInstalledSolutions = function (that) {
    return fluid.promise.fireTransformEvent(that.events.onSolutionsForCurrentDevice);
};

/**
 * This main API entry point for capturing settings from a system or computer. This captures
 * the actual settings on the device, so it assumed to be running in a local untrusted flow
 * manager.
 *
 * @param {Event} onCaptureSettingsForCurrentDevice - The transforming promise chain
 * @param {Object} options - Options for this chain.
 * @param {Array} options.solutionsList - An array of solution IDs to filter by when
 * retreiving settings. If this option is not included, all available settings will be
 * returned. ex: `["com.microsoft.windows.mouseSettings", "com.freedomscientific.jaws"]`.
 * @return {Promise} A promise resolved with the payload of captured system settings.
 */
gpii.flowManager.getSystemSettingsCapture = function (onCaptureSettingsForCurrentDevice, options) {
    return fluid.promise.fireTransformEvent(onCaptureSettingsForCurrentDevice,
        {}, options);
};

/*
 * Runs through all the solutions currently available on the system, pulls the current
 * setting for each supportedSetting and returns them in an object. Primary use case
 * is for backing Capture tools that would allow a user to set up their GPII profile
 * starting with the current settings for their applications on the local machine.
 *
 * TODO update jsdoc with super detailed param info
 *
 * @param {lifecycleManager.variableResolver} resolver - Resolver for looking up handler specifications
 * @param {Object} solutions - Solutions registry entries for solutions available on the current machine.
 * @param {event} event - Event to call with the payload as an argument after processing.
 * @return {undefined} Returns nothing. Results are fired as an argument to the `event` argument.
 */
gpii.flowManager.captureSystemSettings = function (invokeSettingsHandlerGet, resolver, solutions, options) {
    var promiseTogo = fluid.promise();

    var handlerGetPromises = [];

    var safeHandlerGet = function (invokeSettingsHandlerGet, solutionID, handlerSpec) {
        var promiseTogo = fluid.promise();
        try {
            invokeSettingsHandlerGet(solutionID, handlerSpec).then(function (data) {
                promiseTogo.resolve(data);
            }, function (err) {
                promiseTogo.resolve({
                    solutionId: solutionID,
                    handlerSpec: handlerSpec,
                    isError: true,
                    message: "inner promise error",
                    err: err
                });
            });
        }
        catch (err) {
            promiseTogo.resolve({
                solutionId: solutionID,
                handlerSpec: handlerSpec,
                isError: true,
                message: "outer try error",
                err: err
            });
        }
        return promiseTogo;
    };

    var solutionsToFetch = solutions;
    if (options.solutionsList) {
        solutionsToFetch = {};
        fluid.each(solutions, function (solution, solutionID) {
            if (options.solutionsList.indexOf(solutionID) >= 0) {
                solutionsToFetch[solutionID] = solution;
            }
        });
    }

    fluid.each(solutionsToFetch, function (solution, solutionID) {
        var newSolution = gpii.lifecycleManager.transformSolutionSettings(solution, gpii.settingsHandlers.changesToSettings);
        fluid.each(newSolution.settingsHandlers, function (handlerSpec) {
            //if applicationSettings is unspecified, dont attempt to get settings
            if (!handlerSpec.supportedSettings) {
                return;
            }
            handlerSpec.settings = handlerSpec.supportedSettings;
            // TODO GPII-228 This is temporary debugging code while we work through
            // the processing that is missing from this chain that transforms the paths
            // in capabilitiesTransforms to the schema information needed for the settings
            // handler
            if (handlerSpec.type === "gpii.windows.spiSettingsHandler") {
                fluid.each(handlerSpec.settings, function (handler, handlerKey) {
                    if (handlerSpec.capabilitiesTransformations[handlerKey].path.transform) {
                        handlerSpec.settings[handlerKey].path =
                            handlerSpec.capabilitiesTransformations[handlerKey].path.transform.input;
                    };
                    if (handlerSpec.capabilitiesTransformations[handlerKey].path.literalValue) {
                        handlerSpec.settings[handlerKey].path =
                            handlerSpec.capabilitiesTransformations[handlerKey].path.literalValue;
                    };
                });
            }
            handlerSpec = resolver.resolve(handlerSpec, {});
            handlerGetPromises.push(safeHandlerGet(invokeSettingsHandlerGet, solutionID, handlerSpec));
        });
    });
    var promisesSequence = fluid.promise.sequence(handlerGetPromises);
    promisesSequence.then(function (responses) {
        // The return payload from the promise sequence looks like:
        // [
        //     {
        //         "fakemag1": [
        //             {
        //                 "settings": {
        //                     "magnification": 2
        //                 }
        //             }
        //         ]
        //     },
        //     {
        //         "fakemag1": [
        //             {
        //                 "settings": {
        //                     "invert": true
        //                 }
        //             }
        //         ]
        //     },
        //     {
        //         "fakemag2": [
        //             {
        //                 "settings": {
        //                     "magnification": 2,
        //                     "invert": true
        //                 }
        //             }
        //         ]
        //     }
        // ]
        //
        // and we want:
        //
        // {
        //     "fakemag1": {
        //         "magnification": 2,
        //         "invert": true
        //     },
        //     "fakemag2": {
        //         "magnification": 2,
        //         "invert": true
        //     }
        // }
        var finalPayload = {};
        fluid.each(responses, function (sequenceItem) {
            fluid.each(sequenceItem, function (item, key) {
                if (!finalPayload[key]) {
                    finalPayload[key] = {};
                }
                fluid.each(item[0].settings, function (value, settingId) {
                    finalPayload[key][settingId] = value;
                });
            });
        });
        promiseTogo.resolve(finalPayload);
    }, function (responses) {
        promiseTogo.resolve(responses);
    });

    return promiseTogo;
};

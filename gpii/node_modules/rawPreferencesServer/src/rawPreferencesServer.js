/*!
GPII Raw Preferences Server

Copyright 2012 OCAD University
Copyright 2014-2015 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

The research leading to these results has received funding from the European Union's
Seventh Framework Programme (FP7/2007-2013) under grant agreement no. 289016.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        uuid = require("node-uuid");

    require("kettle");

    fluid.defaults("gpii.rawPreferencesServer", {
        gradeNames: ["kettle.app"],
        requestHandlers: {
            rawPreferencesGet: {
                route: "/rawPreferences/:userToken",
                method: "get",
                handler: "gpii.rawPreferencesServer.get.handler"
            },
            rawPreferencesPost: {
                route: "/rawPreferences",
                method: "post",
                handler: "gpii.rawPreferencesServer.write.handler"
            },
            rawPreferencesPut: {
                route: "/rawPreferences/:userToken",
                method: "put",
                handler: "gpii.rawPreferencesServer.write.handler"
            }
        },
        rawPreferencesSourceUrl: "",
        components: {
            rawPreferencesSource: {
                type: "kettle.dataSource.CouchDB",
                options: {
                    url: "{gpii.rawPreferencesServer}.options.rawPreferencesSourceUrl",
                    writable: true,
                    termMap: {
                        userToken: "%userToken"
                    }
                }
            }
        }
    });

    fluid.defaults("gpii.rawPreferencesServer.dev", {
        gradeNames: ["kettle.urlExpander.distributeDevVariables"],
        components: {
            rawPreferencesSource: {
                type: "kettle.dataSource.URL"
            }
        }
    });


    gpii.rawPreferencesServer.handlePreferences = function (request, userToken, preferences) {
        if (preferences && preferences.isError) { // preferences are NOT expected on PUT/POST
            request.events.onError.fire(preferences);
        } else {
            var data = {
                userToken: userToken,
                preferences: preferences
            };
    
            request.events.onSuccess.fire(data);
        }
    };

    fluid.defaults("gpii.rawPreferencesServer.get.handler", {
        gradeNames: ["kettle.request.http"],
        invokers: {
            handle: {
                funcName: "gpii.handleRawPreferencesGet",
                args: [ "{request}", "{request}.req.params.userToken", "{rawPreferencesServer}.rawPreferencesSource"]
            }
        }
    });


    gpii.handleRawPreferencesGet = function (request, userToken, rawPreferencesSource) {
        var promise = rawPreferencesSource.get({userToken: userToken});
        promise.then(function (preferences) {
            if (preferences === undefined) {
                request.events.onError.fire({
                    isError: true,
                    message: "Unable to retrieve raw preferences for user " + userToken,
                    statusCode: 404
                });
                return;
            }
            gpii.rawPreferencesServer.handlePreferences(request, userToken, preferences);
        }, function (err) {
            // slightly odd "err.message || err.error" here due things like the parser sending their output
            // in an 'error' key
            request.events.onError.fire({
                isError: true,
                message: "Unable to retrieve preferences from raw preferences server.. Reason: " + (err.message || err.error),
                statusCode: 500
            });
        });
    };


    fluid.defaults("gpii.rawPreferencesServer.write.handler", {
        gradeNames: ["kettle.request.http"],
        invokers: {
            handle: {
                funcName: "gpii.rawPreferencesServer.write.handleRequest",
                args: [ "{request}", "{rawPreferencesServer}.rawPreferencesSource"]
            }
        }
    });

    gpii.rawPreferencesServer.write.handleRequest = function (request, rawPreferencesSource) {
        var userToken = request.req.params.userToken || uuid.v4();
        rawPreferencesSource.set({
            userToken: userToken
        }, request.req.body, function () {
            gpii.rawPreferencesServer.handlePreferences(request, userToken, request.req.body);
        });
    };


})();

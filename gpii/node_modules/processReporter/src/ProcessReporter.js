/**
 * GPII Process Reporter
 *
 * Copyright 2015 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    gpii = fluid.registerNamespace("gpii");

fluid.require("kettle", require);
fluid.require("./processesBridge.js", require);

fluid.defaults("gpii.processReporter", {
    gradeNames: "fluid.component"
});

fluid.defaults("gpii.processReporter.base", {
    gradeNames: ["kettle.app", "gpii.processReporter"],
    requestHandlers: {
        processGet: {
            route: "/processes",
            type: "gpii.processReporter.allSolutions.get",
            method: "get"
        },
        processGetSingle: {
            route: "/processes/:solutionID",
            type: "gpii.processReporter.solution.get",
            method: "get"
        }
    },
    components: {
        platformReporter: {
            type: "gpii.platformReporter.native"
        },
        nameResolver: {
            type: "gpii.processReporter.nameResolver"
        }
    },
    invokers: {
        fireResponse: {
            funcName: "gpii.processReporter.fireResponse",
            args: ["{arguments}.0", "{arguments}.1", "{platformReporter}"]
                  // request, runningSolutions
        }
    }
});

fluid.defaults("gpii.processReporter.allSolutions.get", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            func: "{processReporter}.get",
            args: [
                "{request}"
            ]
        }
    }
});

fluid.defaults("gpii.processReporter.solution.get", {
    gradeNames: ["kettle.request.http"],
    invokers: {
        handleRequest: {
            func: "{processReporter}.getProcess",
            args: ["{request}", "{processReporter}", "{solutionsRegistryDataSource}"]
        }
    }
});

fluid.defaults("gpii.processReporter.nameResolver", {
    gradeNames: ["fluid.component"],
    invokers: {
        resolveName: {
            funcName: "fluid.identity"
        }
    }
});

gpii.processReporter.fireResponse = function (request, runningSolutions, platformReporter) {
    request.events.onSuccess.fire({
        solutions: runningSolutions,
        OS: platformReporter.reportPlatform()
    });
};

fluid.defaults("gpii.processReporter.static", {
    gradeNames: ["gpii.processReporter.base"],
    components: {
        runningSolutionsDataSource: {
            type: "kettle.dataSource.file",
            options: {
                gradeNames: "kettle.dataSource.file.moduleTerms"
            }
        }
    },
    invokers: {
        get: {
            funcName: "gpii.processReporter.static.get",
            args: ["{arguments}.0", "{processReporter}"]
        },
        getProcess: {
            funcName: "gpii.processReporter.static.getProcess",
            args: ["{arguments}.0", "{processReporter}"]
        }
    }
});

gpii.processReporter["static"].get = function (request, processReporter) {
    var promise = processReporter.runningSolutionsDataSource.get();
    promise.then(function (runningSolutions) {
        if (!fluid.isDestroyed(processReporter)) { // Remove check when FLUID-5790 is resolved.
            processReporter.fireResponse(request, runningSolutions);
        }
    }, function (err) {
        request.events.onError.fire({
            statusCode: 500,
            message: "Failed to read processReporter source. " + (err.message || err.error),
            isError: true
        });
    });
};

gpii.processReporter["static"].getProcess = function (request, processReporter) {
    var solutionID = request.req.params.solutionID;
    var promise = processReporter.runningSolutionsDataSource.get();
    promise.then(function () {
        if (!fluid.isDestroyed(processReporter)) { // Remove check when FLUID-5790 is resolved.
            processReporter.fireResponse(request, { id: solutionID, running: true });
        }
    }, function (err) {
        request.events.onError.fire({
            statusCode: 500,
            message: "Failed to read processReporter source. " + (err.message || err.error),
            isError: true
        });
    });
};

fluid.defaults("gpii.processReporter.live", {
    gradeNames: ["gpii.processReporter.base"],
    invokers: {
        get: {
            funcName: "gpii.processReporter.live.get",
            args: ["{arguments}.0", "{processReporter}", "{flowManager}.solutionsRegistryDataSource"]
        },
        getProcess: {
            funcName: "gpii.processReporter.live.getProcess",
            args: ["{arguments}.0", "{processReporter}", "{flowManager}.solutionsRegistryDataSource"]
        }
    }
});

gpii.processReporter.live.get = function (request, processReporter, solutionsRegistryDataSource) {
    var runningSolutions = [];
    solutionsRegistryDataSource.get({os: processReporter.platformReporter.reportPlatform().id}, function onSuccess(entries) {
        fluid.each(entries, function (entry, entryId) {
            if (!runningSolutions.some(function (s) { return s.id === entryId; })) {
                var foundEntry = fluid.find(entry.isRunning, function (runningSolutionsReporter) {
                    var resolvedName = processReporter.nameResolver.resolveName(runningSolutionsReporter.type, "processReporter");
                    var isRunning = fluid.invokeGradedFunction(resolvedName, runningSolutionsReporter);
                    return { id: entryId, running: isRunning };
                }, null);
                if  (foundEntry !== null) {
                    runningSolutions.push(foundEntry);
                }
            }
        });
        processReporter.fireResponse(request, runningSolutions);
    });
};

gpii.processReporter.live.getProcess = function (request, processReporter, solutionsRegistryDataSource) {
    var solutionID = request.req.params.solutionID;
    var result;
    solutionsRegistryDataSource.get({os: processReporter.platformReporter.reportPlatform().id}, function onSuccess(entries) {
        var solution = fluid.find(entries, function (anEntry, entryID) {
            if (entryID === solutionID) {
                return anEntry;
            }
        }, null);
        if (solution === null) {
            result = { id: solutionID, running: false };
        }
        else {
            result = fluid.find(solution.isRunning, function (runningSolutionsReporter) {
                var resolvedName = processReporter.nameResolver.resolveName(runningSolutionsReporter.type, "processReporter");
                var isRunning = fluid.invokeGradedFunction(resolvedName, runningSolutionsReporter);
                return { id: solutionID, running: isRunning };
            }, {id: solutionID, running: false});
        }
        processReporter.fireResponse(request, result);
    });
};

fluid.defaults("gpii.processReporter.dev", {
    gradeNames: ["kettle.urlExpander.distributeDevVariables"]
});

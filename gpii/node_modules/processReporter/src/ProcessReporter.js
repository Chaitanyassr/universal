/**
 * GPII Process Reporter
 *
 * Copyright 2015 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

"use strict";

var fluid = require("infusion"),
    os = require("os"),
    path = require("path"),
    gpii = fluid.registerNamespace("gpii");

fluid.require("kettle", require);
fluid.require("./ProcessGet.js", require);

fluid.defaults("gpii.processReporter", {
    gradeNames: ["kettle.app", "autoInit"],
    handlers: {
        processGet: {
            route: "/processes",
            type: "get"
        }
    },
    runningSolutionsUrl: "",
    solutionsRegistryUrl: "",
    root: path.join(__dirname, ".."),
    components: {
        runningSolutionsDataSource: {
            type: "kettle.dataSource.URL",
            options: {
                url: "{gpii.processReporter}.options.runningSolutionsUrl"
            }
        },
        solutionsRegistryDataSource: {
            type: "kettle.dataSource.URL",
            options: {
                gradeNames: ["kettle.dataSource.simpleCallbackWrapper"],
                url: "{gpii.processReporter}.options.solutionsRegistryUrl",
                termMap: {
                    os: os.platform()
                }
            }
        },
        platformReporter: {
            type: "gpii.platformReporter.native"
        }
    }
});

fluid.defaults("gpii.platformReporter.native", {
    gradeNames: ["fluid.littleComponent", "autoInit"],
    invokers: {
        reportPlatform: {
            funcName: "gpii.platformReporter.native.reportPlatform"
        }
    }
});

gpii.platformReporter["native"].reportPlatform = function () { // "native" is a reserved word
    return {
        // TODO: need to report more details - windowmanager, etc.
        id: os.platform(),
        // TODO: Need a better strategy - Node semver fails horribly
        // in the face of the benign underscore (eg. x86_64).
        version: os.release().replace("_", "-")
    };
};

fluid.defaults("gpii.processReporter.dev", {
    gradeNames: ["autoInit", "fluid.littleComponent"],
    distributeOptions: {
        source: "{that}.options.urlExpanderGradeNames",
        target: "{that urlExpander}.options.gradeNames"
    },
    urlExpanderGradeNames: ["kettle.urlExpander.development"]
});

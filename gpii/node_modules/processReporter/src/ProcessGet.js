/**
 * GPII Process GET Handler
 *
 * Copyright 2012 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii");
    
    console.log ("fluid.defeatLogging is '" + fluid.defeatLogging + "'");
    fluid.defeatLogging = false;

    fluid.defaults("kettle.requests.request.handler.processGet", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.handleProcessGet",
                args: [
                    "{requestProxy}",
                    "{processReporter}.runningSolutionsDataSource",
                    "{processReporter}.platformReporter",
                    "{processReporter}.solutionsRegistryDataSource"
                ]
            }
        }
    });

    gpii.handleProcessGet = function (requestProxy, runningSolutionsDataSource, platformReporter, solutionsRegistryDataSource) {
        console.log ("PROCESS REPORTER:");
        console.log ("runningSolutionsDataSource.options.url is " + runningSolutionsDataSource.options.url);
        if (runningSolutionsDataSource.options.url) {
            runningSolutionsDataSource.get(null, function onSuccess(solutions) {
                requestProxy.events.onSuccess.fire({
                    processes: solutions,
                    OS: platformReporter.reportPlatform()
                });
            });
        } else {
            var runningSolutions = [];
            console.log ("solutionsRegistryDataSource path:  " + solutionsRegistryDataSource);
            console.log ("solutionsRegistryDataSource.type:  " + solutionsRegistryDataSource.type);
            console.log ("solutionsRegistryDataSource.options:  " + solutionsRegistryDataSource.options);
            console.log ("solutionsRegistryDataSource.options.url:  " + solutionsRegistryDataSource.options.url);
            solutionsRegistryDataSource.get(null, function onSuccess(entries) {
                debugger;
                console.log ("GOT HERE!");
                fluid.each(entries, function (entry, entryId) {
                    if (!runningSolutions.some(function (s) { return s.id === entryId; })) {
                        var foundEntry = fluid.find(entry.contexts.isRunning, function (runningSolutionsReporter) {
                            debugger;
                            var procs = fluid.invokeGradedFunction(runningSolutionsReporter.type, runningSolutionsReporter);
                            if (procs !== null) {
                              return { id: entryId, processes: procs };
                            }
                        }, null);
                        if  (foundEntry !== null) {
                            debugger;
                            runningSolutions.push (foundEntry);
                        }
                    }
                });
                console.log ("AFTER fluid.each()");
                requestProxy.events.onSuccess.fire({
                    processes: runningSolutions,
                    OS: platformReporter.reportPlatform()
                });
            });
            console.log ("END OF ELSE");
        }
    };

})();
